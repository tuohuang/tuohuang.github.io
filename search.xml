<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VsCode开发Vue项目配置保存代码自动Eslint格式化</title>
      <link href="/2021/09/13/vscode%E5%BC%80%E5%8F%91vue%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E4%BF%9D%E5%AD%98%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8eslint%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/2021/09/13/vscode%E5%BC%80%E5%8F%91vue%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E4%BF%9D%E5%AD%98%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8eslint%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="首先安装以下模块"><a href="#首先安装以下模块" class="headerlink" title="首先安装以下模块"></a>首先安装以下模块</h2><p><code>babel-eslint</code>,<code>eslint</code>,<code>eslint-config-prettier</code>,<code>eslint-plugin-prettier</code>,<code>eslint-plugin-vue</code>,<code>prettier</code></p><p>其中<code>prettier</code>相关的模块是可以让eslint使用prettier（格式化代码的工具）的配置规则，安装后package.json会多出如下模块记录<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;babel-eslint&quot;: &quot;^10.1.0&quot;,</span><br><span class="line">&quot;eslint&quot;: &quot;^7.32.0&quot;,</span><br><span class="line">&quot;eslint-config-prettier&quot;: &quot;^8.3.0&quot;,</span><br><span class="line">&quot;eslint-plugin-prettier&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">&quot;eslint-plugin-vue&quot;: &quot;^7.17.0&quot;,</span><br><span class="line">&quot;prettier&quot;: &quot;^2.4.0&quot;,</span><br></pre></td></tr></table></figure></p><h2 id="项目更目录创建-eslintrc-js文件"><a href="#项目更目录创建-eslintrc-js文件" class="headerlink" title="项目更目录创建.eslintrc.js文件"></a>项目更目录创建<code>.eslintrc.js</code>文件</h2><p>内容大致如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  root: true,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: true,</span><br><span class="line">    browser: true,</span><br><span class="line">    es6: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  ignorePatterns: [&#x27;node_modules&#x27;, &#x27;dist&#x27;, &#x27;test&#x27;],</span><br><span class="line">  extends: [&#x27;plugin:vue/essential&#x27;, &#x27;eslint:recommended&#x27;, &#x27;@vue/prettier&#x27;],</span><br><span class="line">  globals: &#123;</span><br><span class="line">    eventBus: &#x27;readonly&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: &#x27;babel-eslint&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [&#x27;vue&#x27;],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    &#x27;no-console&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;warn&#x27; : &#x27;off&#x27;,</span><br><span class="line">    &#x27;no-debugger&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;warn&#x27; : &#x27;off&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="配置属性解释"><a href="#配置属性解释" class="headerlink" title="配置属性解释"></a>配置属性解释</h3><ol><li><p><code>root</code>意思是当前目录既是此配置有效目录，其规则不会作用域当前目录的上层目录；<code>env</code> 是指定规则所处的环境可以允许其全局变量（<a href="http://eslint.cn/docs/user-guide/configuring#specifying-environments">参考</a>）；</p></li><li><p><code>ignorePatterns</code>是需要忽略eslint作用的目录；</p></li><li><code>globals</code>生名全局变量，避免某个全局变量eslint会报错或警告；</li><li><code>parserOptions</code>；</li><li><code>extends</code>可配置eslint的拓展，多个拓展使用数组，其中<code>eslint:recommended</code>是启用一系列核心规则，其规则便是下面的<code>rules</code>属性；<code>plugin:vue/essential</code> 是使用插件对应的规则，如果是vue3项目建议用<code>plugin:vue/vue3-recommended</code>替代，<code>&#39;@vue/prettier&#39;</code>是使用额外的配置文件；</li><li><code>plugins</code>是要使用的插件；</li><li><code>rules</code>是定义的检测规则</li></ol><h3 id="配置VsCode"><a href="#配置VsCode" class="headerlink" title="配置VsCode"></a>配置VsCode</h3><p>打开VsCode配置文件设置<code>&quot;eslint.run&quot;: &quot;onSave&quot;,</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli3打包配置优化</title>
      <link href="/2020/11/13/vue-cli3%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/"/>
      <url>/2020/11/13/vue-cli3%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="使用cdn引入不改变的第三方库"><a href="#使用cdn引入不改变的第三方库" class="headerlink" title="使用cdn引入不改变的第三方库"></a>使用cdn引入不改变的第三方库</h3><ol><li><p>配置vue.config.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cdn = &#123;</span><br><span class="line">  <span class="comment">// 需要忽略打包的第三方库</span></span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">    <span class="attr">vuex</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">    <span class="attr">axios</span>: <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过cdn方式使用</span></span><br><span class="line">  <span class="attr">js</span>: [</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/vue/2.6.11/vue.runtime.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/vue-router/3.1.2/vue-router.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/vuex/3.1.2/vuex.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/axios/0.19.2/axios.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/moment.js/2.24.0/moment.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/echarts/3.7.1/echarts.min.js&#x27;</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">css</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 配置cdn引入</span></span><br><span class="line">        config.plugin(<span class="string">&#x27;html&#x27;</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">          args[<span class="number">0</span>].cdn = cdn</span><br><span class="line">          <span class="keyword">return</span> args</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// 忽略打包配置</span></span><br><span class="line">        config.externals = cdn.externals</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置public/index.html</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增加以下代码--&gt;</span></span><br><span class="line">    &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp; htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="移除prefetch插件，避免加载多余的资源"><a href="#移除prefetch插件，避免加载多余的资源" class="headerlink" title="移除prefetch插件，避免加载多余的资源"></a>移除prefetch插件，避免加载多余的资源</h3><p>vue.config.js增加以下代码<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除prefetch插件，避免加载多余的资源</span></span><br><span class="line">    config.plugins.delete(<span class="string">&#x27;prefetch&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义目录的简写路径"><a href="#定义目录的简写路径" class="headerlink" title="定义目录的简写路径"></a>定义目录的简写路径</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 定义文件夹的路径</span></span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">&#x27;@&#x27;</span>, resolve(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;assets&#x27;</span>, resolve(<span class="string">&#x27;src/assets&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;components&#x27;</span>, resolve(<span class="string">&#x27;src/components&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;router&#x27;</span>, resolve(<span class="string">&#x27;src/router&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;store&#x27;</span>, resolve(<span class="string">&#x27;src/store&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;views&#x27;</span>, resolve(<span class="string">&#x27;src/views&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 压缩图片</span></span><br><span class="line">    <span class="keyword">const</span> imagesRule = config.module.rule(<span class="string">&#x27;images&#x27;</span>)</span><br><span class="line">    imagesRule.uses.clear()</span><br><span class="line">    imagesRule.use(<span class="string">&#x27;file-loader&#x27;</span>)</span><br><span class="line">        .loader(<span class="string">&#x27;url-loader&#x27;</span>)</span><br><span class="line">        .options(&#123;</span><br><span class="line">          <span class="attr">limit</span>: <span class="number">10240</span>,</span><br><span class="line">          <span class="attr">fallback</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">outputPath</span>: <span class="string">&#x27;static/images&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用gzip压缩"><a href="#使用gzip压缩" class="headerlink" title="使用gzip压缩"></a>使用gzip压缩</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要安装插件</span></span><br><span class="line">npm i compression-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入gzip压缩插件</span></span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启gzip压缩</span></span><br><span class="line">    config.plugins.push(</span><br><span class="line">      <span class="keyword">new</span> CompressionWebpackPlugin(</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;info.path&#125;</span>.gz<span class="subst">$&#123;info.query&#125;</span>`</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">algorithm</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">          <span class="attr">threshold</span>: <span class="number">10240</span>, <span class="comment">// 只有大小大于该值的资源会被处理 10240</span></span><br><span class="line">          <span class="attr">test</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;\\.(&#x27;</span> + [<span class="string">&#x27;js&#x27;</span>].join(<span class="string">&#x27;|&#x27;</span>) + <span class="string">&#x27;)$&#x27;</span></span><br><span class="line">          ),</span><br><span class="line">          <span class="attr">minRatio</span>: <span class="number">0.8</span>, <span class="comment">// 只有压缩率小于这个值的资源才会被处理</span></span><br><span class="line">          <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span> <span class="comment">// 删除原文件</span></span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要gzip压缩的文件</span></span><br><span class="line">   <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>, <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">false</span>, <span class="comment">// 配置自动启动浏览器</span></span><br><span class="line">    before (app, server) &#123;</span><br><span class="line">      app.get(<span class="regexp">/.*.(js)$/</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">        req.url = req.url + <span class="string">&#x27;.gz&#x27;</span></span><br><span class="line">        res.set(<span class="string">&#x27;Content-Encoding&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>)</span><br><span class="line">        next()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置全局sass无需再组件中引入即可使用"><a href="#配置全局sass无需再组件中引入即可使用" class="headerlink" title="配置全局sass无需再组件中引入即可使用"></a>配置全局sass无需再组件中引入即可使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">extract</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">sourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// 定义全局scss无需引入即可使用</span></span><br><span class="line">      <span class="attr">sass</span>: &#123;</span><br><span class="line">        <span class="attr">prependData</span>: <span class="string">`</span></span><br><span class="line"><span class="string">          @import &quot;@/assets/css/variable.scss&quot;;</span></span><br><span class="line"><span class="string">          @import &quot;@/assets/css/common.scss&quot;;</span></span><br><span class="line"><span class="string">          @import &quot;@/assets/css/mixin.scss&quot;;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公共代码抽离"><a href="#公共代码抽离" class="headerlink" title="公共代码抽离"></a>公共代码抽离</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">    config.optimization = &#123;</span><br><span class="line">      <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">        <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">          <span class="attr">vendor</span>: &#123;</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            name: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">maxInitialRequests</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">100</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="去除console-log"><a href="#去除console-log" class="headerlink" title="去除console.log()"></a>去除console.log()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        config.plugins.push(</span><br><span class="line">          <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">            <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">              <span class="attr">ecma</span>: <span class="literal">undefined</span>,</span><br><span class="line">              <span class="attr">warnings</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">parse</span>: &#123;&#125;,</span><br><span class="line">              <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="attr">drop_console</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">drop_debugger</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">pure_funcs</span>: [<span class="string">&#x27;console.log&#x27;</span>] <span class="comment">// 移除console</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// gzip压缩插件</span></span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码打包之后取出console.log压缩代码</span></span><br><span class="line"><span class="keyword">const</span> TerserPlugin = <span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图形化打包详情</span></span><br><span class="line"><span class="keyword">const</span> BundleAnalyzer = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cdn = &#123;</span><br><span class="line">  <span class="comment">// 忽略打包的第三方库</span></span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">    <span class="attr">vuex</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">    <span class="attr">axios</span>: <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 通过cdn方式使用</span></span><br><span class="line">  <span class="attr">js</span>: [</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/vue/2.6.11/vue.runtime.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/vue-router/3.1.2/vue-router.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/vuex/3.1.2/vuex.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/axios/0.19.2/axios.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/moment.js/2.24.0/moment.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/echarts/3.7.1/echarts.min.js&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">css</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 是否触发eslint检查</span></span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="comment">// 打包文件的出口</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">  <span class="comment">// 放置生成的css和js和img和fonts的目录</span></span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">  <span class="comment">// 存放index.html模板的路径</span></span><br><span class="line">  <span class="attr">indexPath</span>: <span class="string">&#x27;static/index.html&#x27;</span>,</span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 配置cdn引入</span></span><br><span class="line">    config.plugin(<span class="string">&#x27;html&#x27;</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">      args[<span class="number">0</span>].cdn = cdn</span><br><span class="line">      <span class="keyword">return</span> args</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除prefetch插件，避免加载多余的资源</span></span><br><span class="line">    config.plugins.delete(<span class="string">&#x27;prefetch&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义文件夹的路径</span></span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">&#x27;@&#x27;</span>, resolve(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;assets&#x27;</span>, resolve(<span class="string">&#x27;src/assets&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;components&#x27;</span>, resolve(<span class="string">&#x27;src/components&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;router&#x27;</span>, resolve(<span class="string">&#x27;src/router&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;store&#x27;</span>, resolve(<span class="string">&#x27;src/store&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;views&#x27;</span>, resolve(<span class="string">&#x27;src/views&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 压缩图片</span></span><br><span class="line">    <span class="keyword">const</span> imagesRule = config.module.rule(<span class="string">&#x27;images&#x27;</span>)</span><br><span class="line">    imagesRule.uses.clear()</span><br><span class="line">    imagesRule.use(<span class="string">&#x27;file-loader&#x27;</span>)</span><br><span class="line">      .loader(<span class="string">&#x27;url-loader&#x27;</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        <span class="attr">limit</span>: <span class="number">10240</span>,</span><br><span class="line">        <span class="attr">fallback</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">outputPath</span>: <span class="string">&#x27;static/images&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 压缩响应的app.json返回的代码压缩</span></span><br><span class="line">    config.optimization.minimize(<span class="literal">true</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// webpack的配置</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 忽略打包配置</span></span><br><span class="line">    config.externals = cdn.externals</span><br><span class="line">    <span class="comment">// 生产环境配置</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 代码压缩去除console.log</span></span><br><span class="line">      config.plugins.push(</span><br><span class="line">        <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">          <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ecma</span>: <span class="literal">undefined</span>,</span><br><span class="line">            <span class="attr">warnings</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">parse</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">compress</span>: &#123;</span><br><span class="line">              <span class="attr">drop_console</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">drop_debugger</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">pure_funcs</span>: [<span class="string">&#x27;console.log&#x27;</span>] <span class="comment">// 移除console</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启gzip压缩</span></span><br><span class="line">    config.plugins.push(</span><br><span class="line">      <span class="keyword">new</span> CompressionWebpackPlugin(</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;info.path&#125;</span>.gz<span class="subst">$&#123;info.query&#125;</span>`</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">algorithm</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">          <span class="attr">threshold</span>: <span class="number">10240</span>, <span class="comment">// 只有大小大于该值的资源会被处理 10240</span></span><br><span class="line">          <span class="attr">test</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;\\.(&#x27;</span> + [<span class="string">&#x27;js&#x27;</span>].join(<span class="string">&#x27;|&#x27;</span>) + <span class="string">&#x27;)$&#x27;</span></span><br><span class="line">          ),</span><br><span class="line">          <span class="attr">minRatio</span>: <span class="number">0.8</span>, <span class="comment">// 只有压缩率小于这个值的资源才会被处理</span></span><br><span class="line">          <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span> <span class="comment">// 删除原文件</span></span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示打包图形化信息</span></span><br><span class="line">    config.plugins.push(</span><br><span class="line">      <span class="keyword">new</span> BundleAnalyzer()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共代码抽离</span></span><br><span class="line">    config.optimization = &#123;</span><br><span class="line">      <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">        <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">          <span class="attr">vendor</span>: &#123;</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            name: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">maxInitialRequests</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">100</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">extract</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">sourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// 定义全局scss无需引入即可使用</span></span><br><span class="line">      <span class="attr">sass</span>: &#123;</span><br><span class="line">        <span class="attr">prependData</span>: <span class="string">`</span></span><br><span class="line"><span class="string">          @import &quot;@/assets/css/variable.scss&quot;;</span></span><br><span class="line"><span class="string">          @import &quot;@/assets/css/common.scss&quot;;</span></span><br><span class="line"><span class="string">          @import &quot;@/assets/css/mixin.scss&quot;;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 需要gzip压缩的文件</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>, <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">false</span>, <span class="comment">// 配置自动启动浏览器</span></span><br><span class="line">    before (app, server) &#123;</span><br><span class="line">      app.get(<span class="regexp">/.*.(js)$/</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">        req.url = req.url + <span class="string">&#x27;.gz&#x27;</span></span><br><span class="line">        res.set(<span class="string">&#x27;Content-Encoding&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>)</span><br><span class="line">        next()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完结。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多维数组根据某个值获取这个值对应的数组项，支持获取整个链条</title>
      <link href="/2020/11/06/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E6%A0%B9%E6%8D%AE%E6%9F%90%E4%B8%AA%E5%80%BC%E8%8E%B7%E5%8F%96%E8%BF%99%E4%B8%AA%E5%80%BC%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E7%BB%84%E9%A1%B9%EF%BC%8C%E6%94%AF%E6%8C%81%E8%8E%B7%E5%8F%96%E6%95%B4%E4%B8%AA%E9%93%BE%E6%9D%A1/"/>
      <url>/2020/11/06/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E6%A0%B9%E6%8D%AE%E6%9F%90%E4%B8%AA%E5%80%BC%E8%8E%B7%E5%8F%96%E8%BF%99%E4%B8%AA%E5%80%BC%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E7%BB%84%E9%A1%B9%EF%BC%8C%E6%94%AF%E6%8C%81%E8%8E%B7%E5%8F%96%E6%95%B4%E4%B8%AA%E9%93%BE%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<p>有个省市区的多维数组，给定一个省或市或区对应的code 找到这个区的名称</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arr: 数组， id: 省市区的code或id</span></span><br><span class="line">getArea(arr, id)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i].areaid == id)&#123;</span><br><span class="line">      <span class="keyword">return</span> arr[i]</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr[i].children&amp;&amp;arr[i].children.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">this</span>.getArea(arr[i].children, id)</span><br><span class="line">      <span class="keyword">if</span>(res)&#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果要是给定的一个区的code，要求不只是获取这个区的名字还要获取这区对应的省市</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getAreas(arr, id, areas=[])&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i].areaid == id)&#123;</span><br><span class="line">      areas.push(arr[i])</span><br><span class="line">      <span class="keyword">return</span> areas</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr[i].children&amp;&amp;arr[i].children.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      areas.push(arr[i])</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">this</span>.getAreas(arr[i].children, id, areas)</span><br><span class="line">      <span class="keyword">if</span>(res)&#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果上面没有return 则说明当前还没有找到，这个时候需要删除</span></span><br><span class="line">  areas.splice(areas.length<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这个时候返回的市一个数组，数组前一项是后一项的父级</p><p>完结。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装和使用nvm</title>
      <link href="/2020/03/23/Ubuntu%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8nvm/"/>
      <url>/2020/03/23/Ubuntu%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8nvm/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载安装脚本，可以使用cURL或Wget，最新版本可以到github查看<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure><p>查看是否已经安装好<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm --version</span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>查看可供安装的版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure></p><p>安装一个nodejs版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm install v12.16.1</span><br></pre></td></tr></table></figure></p><p>查看本地安装的版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure></p><p>使用一个版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm use v10.19.0</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu升级Git版本</title>
      <link href="/2020/03/21/Ubuntu%E5%8D%87%E7%BA%A7Git%E7%89%88%E6%9C%AC/"/>
      <url>/2020/03/21/Ubuntu%E5%8D%87%E7%BA%A7Git%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>###<br>在终端中输入 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:git-core/ppa</span><br></pre></td></tr></table></figure><p>更新源<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><p>然后安装Git<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></p><p>检查git版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async、await、Promise的用法</title>
      <link href="/2019/08/02/async%E3%80%81await%E3%80%81promise/"/>
      <url>/2019/08/02/async%E3%80%81await%E3%80%81promise/</url>
      
        <content type="html"><![CDATA[<p>在学习nodejs的时候了解到最新的ES7语法 async await 可以方便的处理异步执行问题，由于之前都是用的Promise来处理的，大致看了下新语法，感觉非常榜，刚开始了解到的用法大致如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> b()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">22</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后发现还是先打印<code>22</code>然后再打印<code>11</code>，很是纳闷，最后深入了解才知道，<code>await</code>后面需要是一个<code>Promise</code>对象才可以，由于很多第三方模块都已经封装好了，所以可以直接再<code>await</code>后面跟第三方模块的方法，如果是我们自己写的异步方法需要按如下方式来写：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">            resolve(<span class="number">22</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">33</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>需要注意的是异步方法执行完后需要执行<code>Promise</code>的<code>resolve</code>或<code>reject</code>回调函数，不然的话<code>awiat</code>后面的方法执行完就没办法继续向下执行，同时<code>resolve</code>或<code>reject</code>里面的参数就是<code>awiat</code>后面方法执行后的返回值，可以用一个变量来接收，如果下面的逻辑需要用到这个返回值便可以很方便的使用了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Vue的支持数据双向绑定的select组件</title>
      <link href="/2019/07/03/vue-select-component/"/>
      <url>/2019/07/03/vue-select-component/</url>
      
        <content type="html"><![CDATA[<p>今天用Vue做一个小项目需要用到多个select筛选功能，但是原生的太丑，如果直接写在当前页多个select处理起来又太繁琐，第三方ui又太大，所以就自己写了一个，并上传了GitHub仓库,仓库地址：<a href="https://github.com/tuohuang/vue-select" target="_blank" rel="noopener">https://github.com/tuohuang/vue-select</a></p><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><ol><li>引入组件:</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueSelect <span class="keyword">from</span> <span class="string">'../components/VueSelect'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>注册组件</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        VueSelect</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用组件</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-select</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:options</span>=<span class="string">"options"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">value</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">placeholder</span>=<span class="string">"请选择类型"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">v-model</span>=<span class="string">"selected_id"</span></span></span><br><span class="line"><span class="tag">     @<span class="attr">change</span>=<span class="string">"handleChange"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">vue-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>options</code>：选择项列表；</p><p><code>name</code>：选择项列表中选择项名称的属性名；</p><p><code>value</code>：选择项列表中选择项的值的属性名；</p><p><code>v-model</code>：对应双向绑定的选中后的值；</p><p><code>@change</code>：选择发生改变后触发事件，回调参数：当前选项。</p><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO:"></a>DEMO:</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">vue-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:options</span>=<span class="string">"options"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">"请选择一个水果"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"selected_id"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">change</span>=<span class="string">"handleChange"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">vue-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> VueSelect <span class="keyword">from</span> <span class="string">'../components/VueSelect'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">"Index"</span>,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            selected_id: <span class="string">""</span>,</span></span><br><span class="line"><span class="undefined">            options: [</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">"苹果"</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">"橘子"</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">"香蕉"</span>, <span class="attr">id</span>: <span class="number">3</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">"西瓜"</span>, <span class="attr">id</span>: <span class="number">4</span>&#125;,</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">        VueSelect</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        handleChange(e) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL批量启动nginx,mysql和php</title>
      <link href="/2019/06/20/WSL%E6%89%B9%E9%87%8F%E5%90%AF%E5%8A%A8nginx,mysql%E5%92%8Cphp/"/>
      <url>/2019/06/20/WSL%E6%89%B9%E9%87%8F%E5%90%AF%E5%8A%A8nginx,mysql%E5%92%8Cphp/</url>
      
        <content type="html"><![CDATA[<p>再WSL下安装了nginx、mysql、php,但是每次电脑重启后都好手动启动这些服务，貌似微软说现在是没有办法实现bash服务自启动，但是我们可以写一个<code>.sh</code>脚本来一次启动所有服务，脚本如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Starting nginx'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PW</span> | sudo -S service nginx start &gt; /dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">'Nginx Started'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'starting Mysql'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PW</span> | sudo -S service mysqld start &gt; /dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">'Mysql Started'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'starting fpm'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PW</span> | sudo -S php-fpm -R &gt; /dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">'Php fpm Started'</span></span><br><span class="line"><span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure></p><p>保存为一个<code>.sh</code>文件，例如start_server.sh<br>此时这个文件可能没有执行权限，需要执行：<code>chmod 744 start_server.sh</code>，命令中的744三个数字分别代表所有者访问权限、群组访问权限、其他人访问权限，每一个数字最多可代表三个权限：</p><ul><li>r(Read，读取，权限值为4)：对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目 录的权限。</li><li>w(Write,写入，权限值为2)：对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。</li><li>x(eXecute，执行，权限值为1)：对文件而言，具有执行文件的权限；对目录了来说该用户具有进入目录的权限。</li></ul><p>其数字就是对应的其权限值的和，其他设置文件权限的内容请参考：<a href="https://www.cnblogs.com/Berryxiong/p/6193866.html" target="_blank" rel="noopener">Linux命令:修改文件权限命令chmod、chgrp、chown详解</a>。</p><p>然后打开bash 切换到脚本所在目录执行<code>./start_server.sh</code><br>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL下nginx+php非常慢的结局方法</title>
      <link href="/2019/06/19/WSL%E4%B8%8Bnginx+php%E9%9D%9E%E5%B8%B8%E6%85%A2%E7%9A%84%E7%BB%93%E5%B1%80%E6%96%B9%E6%B3%95/"/>
      <url>/2019/06/19/WSL%E4%B8%8Bnginx+php%E9%9D%9E%E5%B8%B8%E6%85%A2%E7%9A%84%E7%BB%93%E5%B1%80%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>新版Windows 10已经内置Linux子系统了，开发人员可以在Windows上使用Linux的开发环境进行开发了，于是我在WLS上安装了lnmp的开发环境，安装完配置好一个网站，访问发现非常慢，有时候还超时，上网站查找资料了解到nginx和fastcgi的通信方式有两种，一种是TCP socket的方式，一种是unix socket方式,因为WSL安装的php-fpm默认是unix socket。</p><ol><li>TCP是使用TCP端口连接127.0.0.1:9000</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br></pre></td></tr></table></figure><ol start="2"><li>Socket是使用unix domain socket连接套接字php-fpm.sock</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br></pre></td></tr></table></figure><p>从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。 当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。 因为我是作为开发环境使用，所以直接用unix socket,而服务器上用tcp,用于负载均衡。</p><p>解决方法：<br>在nginx的配置文件中加入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastcgi_buffering off;</span><br></pre></td></tr></table></figure><p>这个配置是否启用读取fastcgi服务器消息的缓冲功能。 如果配置为on，nginx在接收到fastcgi服务器的响应结果时尽快将响应写到缓冲区（由fastcgi_buffer_size和fastcgi_buffering指令控制）中，如果响应结果超过了缓冲区的大小，nginx会将超出部分写到临时文件（由fastcgi_max_temp_file_size和fastcgi_temp_file_write_size指令控制）中。 如果配置为off，nginx在接收到fastcgi服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为fastcgi_buffer_size配置的大小</p>]]></content>
      
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPA单页面应用配置反向代理在本地调试微信公众号</title>
      <link href="/2019/06/03/SPA%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
      <url>/2019/06/03/SPA%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>微信公众号的开发需要在微信上设置安全域名，所以如果要本地开发，本地的项目域名也应该使用微信上配置的安全域名，刚开始以为只能在服务器端开发，在本地开发不行，就在测试服务器上搭建了nodejs环境，用VsCode新出的远程调试插件链接服务器进行开发，运行<code>npm run dev</code> 得到一个访问地址，然后用安全域名代理到访问地址来进行开发，但是我们测试服务器的配置太低，1核1G1M，频繁保存编译服务器就卡死了，然后试着将安全域名解析到本地，试着在本地开发，首先将安全域名添加到本地host文件，并指向本地，然后在配置文件做以下配置：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    host: <span class="string">"微信的安全域名"</span>,</span><br><span class="line">    https: <span class="literal">false</span>,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">80</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">'/api'</span>: &#123;</span><br><span class="line">            target: <span class="string">'接口地址'</span>,</span><br><span class="line">            changeOrigin: <span class="literal">true</span></span><br><span class="line">            <span class="comment">// pathRewrite: &#123;</span></span><br><span class="line">            <span class="comment">//     '/api': ''</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就可以在本地愉快的开发了，但是我遇到了一个问题，在本地环境当将当前页面url发送给后台获取config配置时有时候会获取失败，需要将微信配置的安全域名取消指向本地，使其指向我们的服务器，然后用开发者工具请求下这个接口，然后再切换到本地就可以了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git合并分支时忽略合并部分文件</title>
      <link href="/2019/06/03/git%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%97%B6%E5%BF%BD%E7%95%A5%E5%90%88%E5%B9%B6%E9%83%A8%E5%88%86%E6%96%87%E4%BB%B6/"/>
      <url>/2019/06/03/git%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%97%B6%E5%BF%BD%E7%95%A5%E5%90%88%E5%B9%B6%E9%83%A8%E5%88%86%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>最近在开发公司的H5和小程序以及微信公众号，H5和微信公众号代码基本上时一样的，但是公众号使用了一些微信的接口，例如：定位、上传图片、支付等等，总会和H5的代码有些不一样的地方，如果在代码里面做判断会把代码弄得比较乱，就在想可不可以用git将代码建成两个分支，当以后需要修改BUG或升级功能的时候只修改一份代码，然后和另一个分支合并，但是合并的时候需要忽略各自私有的代码文件，上网查了下资料还真的可以这样做，便尝试测试一下，如下操作</p><ol><li><p>在代码根目录创建.gitattributes文件，里面配置合并代码时需要忽略的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件1 merge=ours</span><br><span class="line">文件2 merge=ours</span><br></pre></td></tr></table></figure></li><li><p>git配置文件添加merge.ours.driver true,执行以下命令</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global merge.ours.driver <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>切换到需要修改的分支修改代码、提交代码，然后切换到需要和其他分支合并的分支，执行合并操作<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;分支名&gt;</span><br></pre></td></tr></table></figure></li></ol><p>结果却没有达到自己的预期，不需要合并的文件还是合并了，看了几篇网上的资料基本都是一样的教程，很是令人失望，最后看到一篇文章说，只有当前分支里面需要或略合并的文件提交记录需要比被合并的分支的那个文件要新才能不被合并。这真是个大坑，好多文章都没有说明…</p><p>所以合并之前要在当前分支修改下然后提交再合并才行，那我不需要修改这个文件怎么办？只有修改下注释内容喽，加个空格什么的，没办法呀。这样操作后确实达到了自己的预期。</p><p>后来我有发现一种可行的方案，感觉这种方案比较好，就是先合并分支<code>git merge &lt;分支名&gt;</code>,此时当前分支会有一个或多个文件时提交状态，这个时候将已经是提交状态的文件移到缓存区<code>git reset --soft</code>或用vscode进行’撤销上次提交’，这样我们就可以清除掉不需要修改的文件了<code>git reset &lt;文件名&gt;</code>或用vscode还原修改，然后再进行提交</p><p>有时候我我们需要合并部分代码，而不是忽略部分代码，虽然意思差不多，但是我们的目的是合并部分代码，说明修改的文件多，需要合并的文件少，也可以使用以下方式:<br>切换到需要合并的分支，例如master分支：<code>git checkout master</code>，执行<code>git checkout &lt;被合并的分支名&gt; file1 file2 ...</code>，如果要合并某个分支上的一个commit，执行<code>git cherry-pick &lt;被合并分支上的某个commit&gt;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPA应用公众号授权登录和授权后页面返回的方案</title>
      <link href="/2019/05/31/VUE%E7%AD%89SPA%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E5%92%8C%E6%8E%88%E6%9D%83%E5%90%8E%E9%A1%B5%E9%9D%A2%E8%BF%94%E5%9B%9E%E7%9A%84%E6%96%B9%E6%A1%88/"/>
      <url>/2019/05/31/VUE%E7%AD%89SPA%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E5%92%8C%E6%8E%88%E6%9D%83%E5%90%8E%E9%A1%B5%E9%9D%A2%E8%BF%94%E5%9B%9E%E7%9A%84%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>以前开发微信公众号授权登录都是由后端来完成，但是最近在开发单页面应用时，页面路由不走后台，在网上查找了一些资料，了解了授权登录的原理，便自己封装的一个前端授权登录的模块。授权登录比较顺利完成了，但是遇见了授权完成后返回页面的问题，由于授权成功后微信会跳转到用户设置的redirect_uri链接，在按返回键返回的时候又会返回到微信授权的链接，造成了死循环。所以经过层层怕坑，决心写下此文章，做个记录。</p><h2 id="第一步：用户同意授权，获取code"><a href="#第一步：用户同意授权，获取code" class="headerlink" title="第一步：用户同意授权，获取code"></a>第一步：用户同意授权，获取code</h2><p>我是在收到后台返回code值为需要授权登录的时候跳转到登录页面，在登录页面先判断连接中是否有code，如果没有跳转授权链接。<br>在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下（服务号获得高级接口后，默认拥有scope参数中的snsapi_base和snsapi_userinfo），引导关注者打开如下页面：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</span><br><span class="line">若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限。</span><br></pre></td></tr></table></figure></p><p>以上链接中的appid时申请公众号获得的appid，redirect_uri是用户授权登录成功后需要跳转的链接，需要注意的是redirect_uri需要使用 urlEncode 进行处理，其他参数请查看微信官方文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842</a></p><h2 id="第二步：获取授权登录成功跳转链接中的code值"><a href="#第二步：获取授权登录成功跳转链接中的code值" class="headerlink" title="第二步：获取授权登录成功跳转链接中的code值"></a>第二步：获取授权登录成功跳转链接中的code值</h2><p>可以使用一下函数获取链接中的所有参数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParams</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = location.search; <span class="comment">//获取url携带的参数</span></span><br><span class="line">    <span class="keyword">var</span> urlParams = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = url.substr(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> strs = str.split(<span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strs.length; i ++) &#123;</span><br><span class="line">            urlParams[strs[i].split(<span class="string">"="</span>)[<span class="number">0</span>]]=<span class="built_in">unescape</span>(strs[i].split(<span class="string">"="</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> urlParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>getUrlParams().code便是我们需要得到的内容</p><h2 id="第三步：将code通过ajax发送给后台获取后台传递过来的token和其他用户信息"><a href="#第三步：将code通过ajax发送给后台获取后台传递过来的token和其他用户信息" class="headerlink" title="第三步：将code通过ajax发送给后台获取后台传递过来的token和其他用户信息"></a>第三步：将code通过ajax发送给后台获取后台传递过来的token和其他用户信息</h2><p>有了code我们就可以发送给后台，后台通过code解析出用户信息并生成用户和用户的token返回给前端，这个时候前端需要将token和用户信息保存下来，我是使用本地存储保存的token，用vuex来保存用户信息。</p><h2 id="第四步返回之前的页面"><a href="#第四步返回之前的页面" class="headerlink" title="第四步返回之前的页面"></a>第四步返回之前的页面</h2><p>因为跳转授权链接之前我是先跳转下一个专门的登录页面，所按道理说应该向前返回3个页面，分别为：第一次跳转的登录页面，微信授权的页面，微信授权成功后跳转的链接（这里我配置的是登陆页面），故使用 <code>history.go(-3);</code> 返回。这在开发者工具中每什么问题，可以返回之前的页面，但是在手机上却不行，经过尝试发现手机只需要向前返回两个页面，但是考虑为了开发方便或者可能其他的手机或其他版本的微信需要向前返回3个页面，所又想了一方法不管怎么样都能返回到之前的页面的方法，方法就是在登录页面（第一次跳转的页面中判断是否有存储的token，有的话就再返回一次），哈哈，机智，骚操作~~~</p><p>总结：<br>为了方便自己封装了一个模块：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> wxApi = &#123;</span><br><span class="line">    appid:<span class="string">"*****"</span>,</span><br><span class="line">    urlencode: <span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">        url = (url + <span class="string">''</span>).toString();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(url).replace(<span class="regexp">/!/g</span>, <span class="string">'%21'</span>).replace(<span class="regexp">/'/g</span>, <span class="string">'%27'</span>).replace(<span class="regexp">/\(/g</span>, <span class="string">'%28'</span>).  </span><br><span class="line">        replace(<span class="regexp">/\)/g</span>, <span class="string">'%29'</span>).replace(<span class="regexp">/\*/g</span>, <span class="string">'%2A'</span>).replace(<span class="regexp">/%20/g</span>, <span class="string">'+'</span>);  </span><br><span class="line">    &#125;,</span><br><span class="line">    author: <span class="function"><span class="keyword">function</span>(<span class="params">redirect_uri</span>)</span>&#123;</span><br><span class="line">        redirect_uri = <span class="keyword">this</span>.urlencode(redirect_uri)</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">"https://open.weixin.qq.com/connect/oauth2/authorize?appid="</span> + <span class="keyword">this</span>.appid + <span class="string">"&amp;redirect_uri="</span> + redirect_uri + <span class="string">"&amp;response_type=code"</span>  + <span class="string">"&amp;scope=snsapi_userinfo"</span> + <span class="string">"&amp;state=STATE#wechat_redirect"</span>;</span><br><span class="line">        <span class="built_in">window</span>.location.href = url;</span><br><span class="line">    &#125;,</span><br><span class="line">    getUrlParams: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> url = location.search; <span class="comment">//获取url携带的参数</span></span><br><span class="line">        <span class="keyword">var</span> urlParams = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = url.substr(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> strs = str.split(<span class="string">"&amp;"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strs.length; i ++) &#123;</span><br><span class="line">                urlParams[strs[i].split(<span class="string">"="</span>)[<span class="number">0</span>]]=<span class="built_in">unescape</span>(strs[i].split(<span class="string">"="</span>)[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> urlParams;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    wxApi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用方法：</p><ol><li>引用模块</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;wxApi&#125; <span class="keyword">from</span> <span class="string">"../common/wxApi.js"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>判断本地是否有taoke,有的话返回上一页</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(localStorage.getItem(<span class="string">'token'</span>))&#123;</span><br><span class="line">    history.go(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>判断当前页的链接是否有code值<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(wxApi.getUrlParams().code!=<span class="literal">undefined</span>)&#123; <span class="comment">//如果获取到了微信code,则执行获取token的接口，拿到token需要往前返回两个页面</span></span><br><span class="line">    <span class="keyword">this</span>.getToken(wxApi.getUrlParams().code)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果没有code则跳转到微信的授权页面</span></span><br><span class="line"><span class="keyword">const</span> redirect_uri = config.apiDomain + <span class="string">"/login"</span>;</span><br><span class="line">wxApi.author(redirect_uri)</span><br></pre></td></tr></table></figure></li></ol><p>总的代码就是：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;wxApi&#125; <span class="keyword">from</span> <span class="string">"../common/wxApi.js"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        <span class="keyword">if</span>(localStorage.getItem(<span class="string">'token'</span>))&#123;</span><br><span class="line">            history.go(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(wxApi.getUrlParams().code!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.getToken(wxApi.getUrlParams().code)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> redirect_uri = config.apiDomain + <span class="string">"/login"</span>;</span><br><span class="line">        wxApi.author(redirect_uri)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getToken(code)&#123;</span><br><span class="line">            <span class="keyword">this</span>.$ajax.get(<span class="string">""</span>, &#123;code&#125;, res =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.data.code == <span class="number">1</span>) &#123;</span><br><span class="line">                    localStorage.setItem(<span class="string">"token"</span>, res.data.token);</span><br><span class="line">                    history.go(<span class="number">-2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完结。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地生成ssh公钥免密登录Linux</title>
      <link href="/2019/05/21/%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%88%90ssh%E5%85%AC%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95linux/"/>
      <url>/2019/05/21/%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%88%90ssh%E5%85%AC%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95linux/</url>
      
        <content type="html"><![CDATA[<p>ssh是为远程登录提供的一个安全性的协议。使用它可以防止远程管理过程中的信息泄露问题。目前ssh普遍使用的有两种方式：</p><ol><li>基于口令的安全验证:经过验证帐号与密码即可登陆到远程主机。</li><li>基于密钥的安全验证:需要在本地生成”密钥对”后将公钥传送至服务端，进行公共密钥的比较。</li></ol><p>使用密码验证终归会存在着被骇客暴力破解或嗅探监听的危险，使用ssh服务基于密钥进行安全验证（可无需密码验证），相对来说更安全也更方便，同时最近微软的Visual Studio Code推出了VSCode Remote插件，可以用本地的电脑连接远程服务器，使用远程服务器的开发环境进行开发和调试，但是如果没有使用密钥登录服务器的话，很多操作步骤都需要输入服务器密码，所以使用密钥登录服务器即安全也方便，步骤如下：</p><ol><li>安装git客户端，git基本是程序员的标配</li><li>在电脑的用户目录（我使用的是Windows）右键选择Git Bash Hear</li><li>输入<code>ssh-keygen</code>命令并执行，然后一路按“回车”即可</li><li>重新查看我们的用户目录，发现是否多了一个“.ssh”文件夹，且该文件夹下存在两个文件：</li></ol><ul><li>公钥：id_rsa.pub</li><li>私钥：id_rsa</li></ul><ol start="5"><li>运行命令 <code>ssh-copy-id root@0.0.0.0</code>(@后面是服务器的ip)，将公钥上传至服务器，该过程最后需要输入用户root的登陆密码</li><li>运行Xshell,用户身份验证选择Public Key，用户密钥选择选择用户目录/.ssh/id_rsa文件，然后连接即可。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取当前时间戳的4种方法</title>
      <link href="/2019/05/18/js%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/05/18/js%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>时间戳是1970/1/1 午夜距离一个时间的毫秒数</p><ol><li><p>Date.parse()的使用，Date.parse()可以返回一个给定时间和当前时间的时间戳</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回给定时间时间戳</span></span><br><span class="line"><span class="built_in">Date</span>.parse(<span class="string">"2019/05/18"</span>)</span><br><span class="line"><span class="comment">// 输出：1558108800000</span></span><br><span class="line"><span class="built_in">Date</span>.parse(<span class="string">"2019-05-18"</span>)</span><br><span class="line"><span class="comment">// 输出：1558137600000，注：用'-'连接的时间返回的时间多8个小时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回当前时间的事件戳</span></span><br><span class="line"> <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br></pre></td></tr></table></figure></li><li><p>Date.getTime()的使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dateNow = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> strData = dateNow.getTime()</span><br></pre></td></tr></table></figure></li><li><p>巧妙写法 +new Date()</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dateNow = + <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure></li><li><p>new Date().valueOf()</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dateNow = <span class="keyword">new</span> <span class="built_in">Date</span>().valueOf();</span><br></pre></td></tr></table></figure></li><li><p>Date.now()</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dateNow = Data.now();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html2canvas绘制图片时解决图片跨域问题</title>
      <link href="/2019/05/18/html2canvas%E7%BB%98%E5%88%B6%E5%9B%BE%E7%89%87%E6%97%B6%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2019/05/18/html2canvas%E7%BB%98%E5%88%B6%E5%9B%BE%E7%89%87%E6%97%B6%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>使用html2canvas添加{useCORS:true,logging:true}参数。</p><p>html:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"poster"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是文字<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKgC9ZsyziciaeXWmGON9B6gG4rHC3CR7QwlXJDwnHmV0BSpO0RqILPz1nn2UrToic4ib8UlicgpNxXicicg/132"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>js:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> html2canvas <span class="keyword">from</span> html2canvas</span><br><span class="line"></span><br><span class="line">html2canvas(<span class="built_in">document</span>.querySelector(<span class="string">"#poster"</span>),&#123;<span class="attr">useCORS</span>:<span class="literal">true</span>,<span class="attr">logging</span>:<span class="literal">true</span>&#125;).then(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cardImg = canvas.toDataURL()</span><br><span class="line">    <span class="built_in">console</span>.log(cardImg)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPA应用开启history模式的部署</title>
      <link href="/2019/05/17/SPA%E5%BA%94%E7%94%A8%E5%BC%80%E5%90%AFhistory%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/05/17/SPA%E5%BA%94%E7%94%A8%E5%BC%80%E5%90%AFhistory%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="修改vue的路由配置"><a href="#修改vue的路由配置" class="headerlink" title="修改vue的路由配置"></a>修改vue的路由配置</h2><h3 id="1、修改router-js文件中的mode为history模式，并且设置好对应的base选项（部署时目录的名称）"><a href="#1、修改router-js文件中的mode为history模式，并且设置好对应的base选项（部署时目录的名称）" class="headerlink" title="1、修改router.js文件中的mode为history模式，并且设置好对应的base选项（部署时目录的名称）"></a>1、修改router.js文件中的mode为history模式，并且设置好对应的base选项（部署时目录的名称）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    base: <span class="string">"/m/"</span>,</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    routes: []</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="修改服务器配置文件"><a href="#修改服务器配置文件" class="headerlink" title="修改服务器配置文件"></a>修改服务器配置文件</h2><h3 id="1、修改nginx服务器配置文件，找到站点对应的配置文件做如下修改"><a href="#1、修改nginx服务器配置文件，找到站点对应的配置文件做如下修改" class="headerlink" title="1、修改nginx服务器配置文件，找到站点对应的配置文件做如下修改"></a>1、修改nginx服务器配置文件，找到站点对应的配置文件做如下修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.domain.com ;</span><br><span class="line">    root   <span class="string">"/www/wwwroot/xxx"</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">            index  index.html index.htm index.php;</span><br><span class="line">        <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">                rewrite  ^(.*)$  /index.php?s=<span class="variable">$1</span>  last;   <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    location /m &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /m/index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php(.*)$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        fastcgi_param  PATH_INFO  <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        fastcgi_param  PATH_TRANSLATED  <span class="variable">$document_root</span><span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上文件添加内容为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /m &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /m/index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1、修改apache服务器配置文件，打开站点根目录的-htaccess文件，添加以下内容"><a href="#1、修改apache服务器配置文件，打开站点根目录的-htaccess文件，添加以下内容" class="headerlink" title="1、修改apache服务器配置文件，打开站点根目录的.htaccess文件，添加以下内容"></a>1、修改apache服务器配置文件，打开站点根目录的.htaccess文件，添加以下内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line"> RewriteEngine on</span><br><span class="line"> RewriteBase /</span><br><span class="line"> RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line"> RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line"> RewriteRule ^(m+.*)$ /m/index.html [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>注：如果网站之前配置过伪静态，好像不能在之前的配置内容添加<code>RewriteRule ^(m+.*)$ /m/index.html [L]</code>，需要在其原有内容上面添加上面一整块代码</p><p>还有一种方案，前端页面单独部署，绑定域名可以使用接口的域名但是要修改端口号，例如：接口域名：<a href="http://www.api.com，前端页面绑定域名：www.api.com:81，或者使用其他域名，这个时候需要配置接口域名所对应的程序的反向代理,配置如下：" target="_blank" rel="noopener">www.api.com，前端页面绑定域名：www.api.com:81，或者使用其他域名，这个时候需要配置接口域名所对应的程序的反向代理,配置如下：</a></p><p>apache:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_proxy.c&gt;</span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    SSLProxyEngine on</span><br><span class="line">    ProxyPass /m http://www.api.com:81/</span><br><span class="line">    ProxyPassReverse /m http://www.api.com:81/</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></p><p>nginx:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /m/ &#123;</span><br><span class="line">    proxy_pass  http://www.api.com:81/;</span><br><span class="line">    proxy_redirect  off;</span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后将<a href="http://www.api.com/m代理到www.api.com:81，同时前端项目所在网站需要如下设置：" target="_blank" rel="noopener">www.api.com/m代理到www.api.com:81，同时前端项目所在网站需要如下设置：</a><br>apache:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> &lt;IfModule mod_rewrite.c&gt;</span><br><span class="line"> RewriteEngine on</span><br><span class="line"> RewriteBase /</span><br><span class="line"> RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line"> RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line"> RewriteRule ^(.*)$ /index.html [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></p><p>nginx:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /m &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种方案相对第一种接口请求要慢不少，应为中间有个代理层，我估计如果在服务器内部将项目域名用host指向本地应该回合第一种速度差不多，毕竟代理直接就走内网了。<br>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端网页适配最佳解决方案</title>
      <link href="/2017/12/02/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2017/12/02/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>之前也有一个常用的方案就是基于rem的原理，针对不同手机屏幕尺寸和dpr动态的改变根节点html的font-size大小(基准值)。这里我们提取了一个公式(rem表示基准值)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rem = <span class="built_in">document</span>.documentElement.clientWidth * dpr / <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>说明：</p><p>乘以dpr，是因为页面有可能为了实现1px border页面会缩放(scale) 1/dpr 倍(如果没有，dpr=1),。<br>除以10，是为了取整，方便计算(理论上可以是任何值)<br>所以就像下面这样，html的font-size可能会：</p><p>iphone3gs: 320px / 10 = 32px</p><p>iphone4/5: 320px * 2 / 10 = 64px</p><p>iphone6: 375px * 2 / 10 = 75px</p><p>对于动态改变根节点html的font-size，我们可以通过css做，也可以通过javascript做。</p><p>css方式，可以通过设备宽度来媒体查询来改变html的font-size：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>: <span class="number">32px</span>;&#125;</span><br><span class="line"><span class="comment">/* iphone 6  */</span></span><br><span class="line">@<span class="keyword">media</span> (min-device-width : <span class="number">375px</span>) &#123;</span><br><span class="line">   <span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>: <span class="number">64px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* iphone6 plus  */</span></span><br><span class="line">@<span class="keyword">media</span> (min-device-width : <span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>: <span class="number">75px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>缺点：通过设备宽度范围区间这样的媒体查询来动态改变rem基准值，其实不够精确，比如：宽度为360px 和 宽度为320px的手机，因为屏宽在同一范围区间内(&lt;375px)，所以会被同等对待(rem基准值相同)，而事实上他们的屏幕宽度并不相等，它们的布局也应该有所不同。最终，结论就是：这样的做法，没有做到足够的精确，但是够用。<br>javascript方式，通过上面的公式，计算出基准值rem，然后写入样式，大概如下(代码参考自kimi的m-base模块)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dpr, rem, scale;</span><br><span class="line"><span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="keyword">var</span> fontEl = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line"><span class="keyword">var</span> metaEl = <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>);</span><br><span class="line"></span><br><span class="line">dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>;</span><br><span class="line">rem = docEl.clientWidth * dpr / <span class="number">10</span>;</span><br><span class="line">scale = <span class="number">1</span> / dpr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置viewport，进行缩放，达到高清效果</span></span><br><span class="line">metaEl.setAttribute(<span class="string">'content'</span>, <span class="string">'width='</span> + dpr * docEl.clientWidth + <span class="string">',initial-scale='</span> + scale + <span class="string">',maximum-scale='</span> + scale + <span class="string">', minimum-scale='</span> + scale + <span class="string">',user-scalable=no'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置data-dpr属性，留作的css hack之用</span></span><br><span class="line">docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态写入样式</span></span><br><span class="line">docEl.firstElementChild.appendChild(fontEl);</span><br><span class="line">fontEl.innerHTML = <span class="string">'html&#123;font-size:'</span> + rem + <span class="string">'px!important;&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给js调用的，某一dpr下rem和px之间的转换函数</span></span><br><span class="line"><span class="built_in">window</span>.rem2px = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    v = <span class="built_in">parseFloat</span>(v);</span><br><span class="line">    <span class="keyword">return</span> v * rem;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    v = <span class="built_in">parseFloat</span>(v);</span><br><span class="line">    <span class="keyword">return</span> v / rem;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.dpr = dpr;</span><br><span class="line"><span class="built_in">window</span>.rem = rem;</span><br></pre></td></tr></table></figure></p><p>这种方式，可以精确地算出不同屏幕所应有的rem基准值，缺点就是要加载这么一段js代码，但个人觉得是这是目前最好的方案了。</p><p>因为这个方案同时解决了三个问题：</p><ol><li>border: 1px问题</li><li>图片高清问题</li><li>屏幕适配布局问题</li></ol><p>但是有时候产品经理或者客户要求在不同尺寸的屏幕上显示的字体大小要一致,而不是跟着屏幕大小进行缩放，毕竟屏大要演示更多内容嘛，只是单纯的缩放的话大屏的优势就比较少了，所以给出以下的阿里高清方案，该方案使用相当简单，把下面这段已压缩过的 原生JS（仅1kb） 放到 HTML 的 head 标签中即可（注:不要手动设置viewport，该方案自动帮你设置）;<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">if</span>(i[a])<span class="keyword">return</span> i[a].exports;<span class="keyword">var</span> n=i[a]=&#123;<span class="attr">exports</span>:&#123;&#125;,<span class="attr">id</span>:a,<span class="attr">loaded</span>:!<span class="number">1</span>&#125;;<span class="keyword">return</span> e[a].call(n.exports,n,n.exports,t),n.loaded=!<span class="number">0</span>,n.exports&#125;<span class="keyword">var</span> i=&#123;&#125;;<span class="keyword">return</span> t.m=e,t.c=i,t.p=<span class="string">""</span>,t(<span class="number">0</span>)&#125;([<span class="function"><span class="keyword">function</span>(<span class="params">e,t</span>)</span>&#123;<span class="string">"use strict"</span>;<span class="built_in">Object</span>.defineProperty(t,<span class="string">"__esModule"</span>,&#123;<span class="attr">value</span>:!<span class="number">0</span>&#125;);<span class="keyword">var</span> i=<span class="built_in">window</span>;t[<span class="string">"default"</span>]=i.flex=<span class="function"><span class="keyword">function</span>(<span class="params">normal,e,t</span>)</span>&#123;<span class="keyword">var</span> a=e||<span class="number">100</span>,n=t||<span class="number">1</span>,r=i.document,o=navigator.userAgent,d=o.match(<span class="regexp">/Android[\S\s]+AppleWebkit\/(\d&#123;3&#125;)/i</span>),l=o.match(<span class="regexp">/U3\/((\d+|\.)&#123;5,&#125;)/i</span>),c=l&amp;&amp;<span class="built_in">parseInt</span>(l[<span class="number">1</span>].split(<span class="string">"."</span>).join(<span class="string">""</span>),<span class="number">10</span>)&gt;=<span class="number">80</span>,p=navigator.appVersion.match(<span class="regexp">/(iphone|ipad|ipod)/gi</span>),s=i.devicePixelRatio||<span class="number">1</span>;p||d&amp;&amp;d[<span class="number">1</span>]&gt;<span class="number">534</span>||c||(s=<span class="number">1</span>);<span class="keyword">var</span> u=normal?<span class="number">1</span>:<span class="number">1</span>/s,m=r.querySelector(<span class="string">'meta[name="viewport"]'</span>);m||(m=r.createElement(<span class="string">"meta"</span>),m.setAttribute(<span class="string">"name"</span>,<span class="string">"viewport"</span>),r.head.appendChild(m)),m.setAttribute(<span class="string">"content"</span>,<span class="string">"width=device-width,user-scalable=no,initial-scale="</span>+u+<span class="string">",maximum-scale="</span>+u+<span class="string">",minimum-scale="</span>+u),r.documentElement.style.fontSize=normal?<span class="string">"50px"</span>: a/<span class="number">2</span>*s*n+<span class="string">"px"</span>&#125;,e.exports=t[<span class="string">"default"</span>]&#125;]);  flex(<span class="literal">false</span>,<span class="number">100</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p><a href="https://codepen.io/minooo/pen/WoQjKW?editors=1100" target="_blank" rel="noopener">demo实例</a></p><h3 id="代码原理"><a href="#代码原理" class="headerlink" title="代码原理"></a>代码原理</h3><p>这是阿里团队的高清方案布局代码，所谓高清方案就是根据设备屏幕的DPR（设备像素比，又称DPPX，比如dpr=2时，表示1个CSS像素由4个物理像素点组成） 动态设置 html 的font-size, 同时根据设备DPR调整页面的缩放值，进而达到高清效果。</p><h3 id="优势介绍"><a href="#优势介绍" class="headerlink" title="优势介绍"></a>优势介绍</h3><ul><li>引用简单，布局简便</li><li>根据设备屏幕的DPR,自动设置最合适的高清缩放。</li><li>保证了不同设备下视觉体验的一致性。（老方案是，屏幕越大元素越大；此方案是，屏幕越大，看的越多）</li><li>有效解决移动端真实1px问题（这里的1px 是设备屏幕上的物理像素）<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3>绝不是每个地方都要用rem，rem只适用于固定尺寸！<br>在相当数量的布局情境中（比如底部导航元素平分屏幕宽，大尺寸元素），你必须使用百分比或者flex才能完美布局！<br>此方案默认 1rem = 100px，所以你布局的时候，完全可以按照设计师给你的效果图写各种尺寸啦。<br>比如你在效果图上量取的某个按钮元素长 55px, 宽37px ，那你直接可以这样写样式：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.myBtn</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">0.55rem</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0.37rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="常见问题说明"><a href="#常见问题说明" class="headerlink" title="常见问题说明"></a>常见问题说明</h3><p>1.问：为啥手机网页效果图宽度是要640或者750的，我非得弄个666的不行咩？<br>答：老实说当然可以，不过为了规范，640或者750是相对合适的。<br>拿Iphone 5s 举例，它的css像素宽度是320px，由于它的dpr=2，所以它的物理像素宽度为320 × 2 = 640px，这也就是为什么，你在5s上截了一张图，在电脑上打开，它的原始宽度是640px的原因。<br>那 iphone 6 的截图宽度呢？ 375 × 2 = 750<br>那 iphone 6 sp 的截图宽度呢？ 414 × 3 = 1242<br>以此类推，你现在能明白效果图为什么一般是 640 ，750 甚至是 1242 的原因了么？（真没有歧视安卓机的意思。。。）</p><p>2.问：宽度用rem写的情况下， 在 iphone6 上没问题， 在 iphone5上会有横向滚动条，何解？<br>答：假设你的效果图宽度是750，在这个效果图上可能有一个宽度为7rem（高清方案默认 1rem = 100px）的元素。我们知道，高清方案的特点就是几乎完美还原效果图，也就是说，你写了一个宽度为 7rem 的元素，那么在目前主流移动设备上都是7rem。然而，iphone 5 的宽度为640，也就是6.4rem。于是横向滚动条不可避免的出现了。<br>怎么办呢？ 这是我目前推荐的比较安全的方式：如果元素的宽度超过效果图宽度的一半（效果图宽为640或750），果断使用百分比宽度，或者flex布局。就像把等屏宽的图片宽度设为100%一样。</p><p>3.问：不是 1rem = 100px吗，为什么我的代码写了一个宽度为3rem的元素，在电脑端的谷歌浏览器上宽度只有150px?<br>答：先说高清方案代码，再次强调咱们的高清方案代码是根据设备的dpr动态设置html 的 font-size，<br>如果dpr=1(如电脑端），则html的font-size为50px，此时 1rem = 50px<br>如果dpr=2(如iphone 5 和 6），则html的font-size为100px，此时 1rem = 100px<br>如果dpr=3(如iphone 6 sp），则html的font-size为150px，此时 1rem = 150px<br>如果dpr为其他值，即便不是整数，如3.4 , 也是一样直接将dpr 乘以 50 。</p><p>再来说说效果图，一般来讲，我们的效果图宽度要么是640，要么是750，无论哪一个，它们对应设备的dpr=2，此时，1 rem = 50 × 2 = 100px。这也就是为什么高清方案默认1rem = 100px。而将1rem默认100px也是好处多多，可以帮你快速换算单位，比如在750宽度下的效果图，某元素宽度为53px，那么css宽度直接设为53/100=0.53rem了。</p><p>然而极少情况下，有设计师将效果图宽定为1242px，因为他手里只有一个iphone 6 sp (dpr = 3)，设计完效果图刚好可以在他的iphone 6 sp里查看调整。一切完毕之后，他将这个效果图交给你来切图。由于这个效果图对应设备的dpr=3，也就是1rem = 50 × 3 = 150px。所以如果你量取了一个宽度为90px的元素，它的css宽度应该为 90/150=0.6rem。由于咱们的高清方案默认1rem=100px，为了还原效果图，你需要这样换算。当然，一个技巧就是你可以直接修改咱们的高清方案的默认设置。在代码的最后 你会看到 flex(false, 100, 1) ，将其修改成flex(false, 66.66667, 1)（感谢简友：V旅行指出此处错误！ 2017/3/24）就不用那么麻烦的换算了，此时那个90px的直接写成0.9rem就可以了。</p><p>4.问：在此方案下，我如果引用了别的UI库，那些UI库的元素会显得特别小，如何解决？<br>答：可以这样去理解问题的原因，如果不用高清方案，别的UI库的元素在移动设备上（假设这个设备是iphone 5好了）显示是正常的，这没有问题，然后我们在这个设备上将该页面截图放到电脑上看，发现宽度是640（问答1解释过了），根据你的像素眼大致测量，你发现这个设备上的某个字体大小应该是12px，而你在电脑上测量应该是24px。</p><p>现在我们使用高清方案去还原这个页面，那么字体大小应该写为 0.24rem 才对！</p><p>所以，如果你引用了其他的UI库，为了兼容高清方案，你需要对该UI库里凡是应用px的地方做相应处理，即： a px =&gt; a*0.02 rem<br>(具体处理方式因人而异，有模块化开发经验的同学可使用类似的 px2rem 的插件去转化，也可以完全手动处理）</p><p>然而真实情况往往更为复杂，比如，你引入了百度地图（N个样式需要处理转换）；或者你引入了一个<br>framework；又或者你使用了 video 标签，上面默认的尺寸样式很难处理。等等这些棘手问题</p><p>面对这些情况，此时我们的高清方案如果不再压缩页面，那么以上问题将迎刃而解。<br>基于这样的思路，笔者对高清方案的源码做了如下修改，即添加一个叫做 normal 的参数，由它来控制页面是否压缩。<br>在文章顶部代码的最后，你会看到 flex(false, 100, 1)，默认情况下页面是开启压缩的。</p><p>如果你需要禁止压缩，由于我们的源码执行后，直接将flex函数挂载到全局变量window上了，此时你直接在需要禁止压缩的页面执行 window.flex(true) 就可以了，而rem的用法保持不变。</p><p>有一点美中不足的是，如果禁止了页面压缩，高清屏的1像素就不能实现了，如果你必须要实现1像素，那么自行谷歌：css 0.5像素，有N多的解决方案，这里不再赘述。</p><p>5.问：有时候字体会不受控制的变大，怎么办？<br>答：在X5新内核Blink中，在排版页面的时候，会主动对字体进行放大，会检测页面中的主字体，当某一块字体在我们的判定规则中，认为字号较小，并且是页面中的主要字体，就会采取主动放大的操作。然而这不是我们想要的，可以采取给最大高度解决</p><p>解决方案：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123; <span class="attribute">max-height</span>: <span class="number">100000px</span> &#125;</span><br></pre></td></tr></table></figure></p><p>补充：有同学反映，在一些情况下 textarea 标签内的字体大小即便加上上面的方案，字体也会变大，无法控制。此时你需要给 textarea 的 display 设为 table 或者 inline-table 即可恢复正常。<br>6.问：我在底部导航用的flex感觉更合适一些，请问这样子混着用可以吗？<br>答：咱们的rem适合写固定尺寸。其余的根据需要换成flex或者百分比。源码示例中就有这三种的综合运用。</p><p>7.问：在高清方案下，一个标准的，较为理想的宽度为640的页面效果图应该是怎样的？<br>点击浏览：一个标准的640手机页面设计稿参考（没错，在此方案中，你可以完全按照这张设计稿的尺寸写布局了。就是这么简单！）<br>另外阿里UED团队对移动端高清、多屏适配方案参考文章：<a href="http://www.aliued.com/?p=3166" target="_blank" rel="noopener">http://www.aliued.com/?p=3166</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设置搜索引擎收录与不收录的两种方法</title>
      <link href="/2017/10/26/%E8%AE%BE%E7%BD%AE%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%94%B6%E5%BD%95%E4%B8%8E%E4%B8%8D%E6%94%B6%E5%BD%95/"/>
      <url>/2017/10/26/%E8%AE%BE%E7%BD%AE%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%94%B6%E5%BD%95%E4%B8%8E%E4%B8%8D%E6%94%B6%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>在一些情况下为了SEO我们要设置网站的某些页面不被搜索引擎收录，例如我们的后台登陆页面等等，所以通过网络查阅现整理了两种方法，一种是通过网站根目录的Robots.txt文件设置，另一种是在html页面的都不设置meta标签的方法。</p><h3 id="第一种方法：Robots-txt"><a href="#第一种方法：Robots-txt" class="headerlink" title="第一种方法：Robots.txt"></a>第一种方法：Robots.txt</h3><p>搜索引擎使用spider程序自动访问互联网上的网页并获取网页信息。spider在访问一个网站时，会首先会检查该网站的根域下是否有一个叫做 robots.txt的纯文本文件，这个文件用于指定spider在您网站上的抓取范围。您可以在您的网站中创建一个robots.txt，在文件中声明 该网站中不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。</p><p>请注意，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。</p><table><thead><tr><th style="text-align:left">作用</th><th>方法</th></tr></thead><tbody><tr><td style="text-align:left">禁止所有搜索引擎访问网站的任何部分</td><td>User-agent: *<br>Disallow: /</td></tr><tr><td style="text-align:left">允许所有的robot访问</td><td>User-agent: *<br>Allow: /</td></tr><tr><td style="text-align:left">仅禁止Baiduspider访问您的网站</td><td>User-agent:<br>Baiduspider<br>Disallow: /</td></tr><tr><td style="text-align:left">仅允许Baiduspider访问您的网站</td><td>User-agent:<br>Baiduspider<br>Allow: /<br>User-agent: *<br>Disallow: /</td></tr><tr><td style="text-align:left">仅允许Baiduspider以及Googlebot访问</td><td>User-agent:<br>Baiduspider<br>Allow: /<br>User-agent:<br>Googlebot<br>Allow: /<br>User-agent:<br>* Disallow: /</td></tr><tr><td style="text-align:left">禁止spider访问特定目录<br></td><td>User-agent: *<br>Disallow: /cgi-bin/<br>Disallow: /tmp/<br>Disallow: /~joe/</td></tr><tr><td style="text-align:left">允许访问特定目录中的部分url</td><td>User-agent: *<br>Allow: /cgi-bin/see<br>Allow: /tmp/hi<br>Allow:/~joe/look<br>Disallow: /cgi-bin/<br>Disallow: /tmp/<br>Disallow: /~joe/<br></td></tr><tr><td style="text-align:left">使用”*”限制访问url<br>禁止访问/cgi-bin/目录下的所有以”.htm”为后缀的URL(包含子目录)。</td><td>User-agent: <em> <br>Disallow: /cgi-bin/</em>.htm</td></tr><tr><td style="text-align:left">使用”$”限制访问url<br>仅允许访问以”.htm”为后缀的URL。</td><td>User-agent: <em><br>Allow: /</em>.htm$<br>Disallow: /</td></tr><tr><td style="text-align:left">禁止Baiduspider抓取网站上所有图片(仅允许抓取网页)</td><td>User-agent: <br>Baiduspider<br>Disallow: /<em>.jpg$<br>Disallow: /</em>.jpeg$<br>Disallow: /<em>.gif$<br>Disallow: /</em>.png$<br>Disallow: /*.bmp$</td></tr><tr><td style="text-align:left">仅允许Baiduspider抓取网页和.gif格式图片</td><td>User-agent: <br>Baiduspider<br>Allow: /<em>.gif$<br>Disallow: /</em>.jpg$<br>Disallow: /<em>.jpeg$<br>Disallow: /</em>.png$<br>Disallow: /*.bmp$</td></tr><tr><td style="text-align:left">仅禁止Baiduspider抓取.jpg格式图片</td><td>User-agent: <br>Baiduspider<br>Disallow: /*.jpg$</td></tr></tbody></table><h3 id="第二种方法：meta标签"><a href="#第二种方法：meta标签" class="headerlink" title="第二种方法：meta标签"></a>第二种方法：meta标签</h3><p>如果您不想搜索引擎追踪此网页上的链接，且不传递链接的权重，在<head><meta name="generator" content="Hexo 3.8.0">与</head>加入：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;META NAME=&quot;Baiduspider&quot; CONTENT=&quot;NOINDEX,Nofollow,noarchive&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>就可以限制所有的搜索引擎建立你的网页快照。</p><p>必须了解搜索引起抓取页面相关的命令：<br>INDEX命令：告诉搜索引擎抓取这个页面<br>FOLLOW命令：告诉搜索引擎可以从这个页面上找到链接，然后继续访问抓取下去。<br>NOINDEX命令：告诉搜索引擎不允许抓取这个页面<br>NOFOLLOW命令：告诉搜索引擎不允许从此页找到链接、拒绝其继续访问。</p><p>根据以上的命令，我们就有了一下的四种组合<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;META NAME=&quot;Robots&quot; CONTENT=&quot;INDEX,FOLLOW&quot;&gt;：可以抓取本页，而且可以顺着本页继续索引别的链接 </span><br><span class="line">&lt;META NAME=&quot;ROBOTS&quot; CONTENT=&quot;NOINDEX,FOLLOW&quot;&gt;：不许抓取本页，但是可以顺着本页抓取索引别的链接 </span><br><span class="line">&lt;META NAME=&quot;ROBOTS&quot; CONTENT=&quot;INDEX,NOFOLLOW&quot;&gt;：可以抓取本页，但是不许顺着本页抓取索引别的链接 </span><br><span class="line">&lt;META NAME=&quot;ROBOTS&quot; CONTENT=&quot;NOINDEX,NOFOLLOW&quot;&gt;：不许抓取本页，也不许顺着本页抓取索引别的链接。</span><br><span class="line">同时在加上禁止显示快照的代码&lt;metaname=&quot;robots&quot;content=&quot;noarchive&quot;&gt;就OK</span><br></pre></td></tr></table></figure></p><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用.Htaccess文件实现301重定向常用的七种方法</title>
      <link href="/2017/09/04/301%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2017/09/04/301%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>301重定向对广大站长来说并不陌生，从网站建设到目录优化，避免不了对网站目录进行更改，在这种情况下用户的收藏夹里面和搜索引擎里面可能保存的还是老的地址，在打开这些链接时会无法显示页面出现404的错误，造成很差的用户体验并失去了很多流量，今天笔者就给大家分享一下实现301重定向的七种方法。<br>从搜索引擎优化的角度来看，目前301重定向是网站目录更改后重新定向最为可行的一种办法。在你更改地址使用了301重定向后，搜索引擎只会对新地址进行索引，同时会把旧地址下原来收录的链接转移到新地址下，而上述的这些操作并不会影响到网站在搜索引擎的排名。<br>实现301重定向最直接的方法是编辑.htaccess文件，想了解关于htaccess文件使用方法，请点此查看。园子需要提醒你的是，在对.htaccess文件进行操作之前，一定要备份好原来的.htaccess文件，以避免修改出错带来不必要的麻烦。</p><h2 id="1-重定向Domain-Com到Www-Domain-Com"><a href="#1-重定向Domain-Com到Www-Domain-Com" class="headerlink" title="1.重定向Domain.Com到Www.Domain.Com"></a>1.重定向Domain.Com到Www.Domain.Com</h2><p>这种重定向非常常见，最终目的是实现域名的唯一性，也是seo必须要做的。实现方法是在.htaccess文件中加入以下规则：<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; !^www.domain.com$ [NC]</span><br><span class="line">RewriteRule ^(.*)$ http://www.domain.com/$1 [L,R=301]</span><br></pre></td></tr></table></figure></p><h2 id="2-重定向Www-Domain-Com到Domain-Com"><a href="#2-重定向Www-Domain-Com到Domain-Com" class="headerlink" title="2.重定向Www.Domain.Com到Domain.Com"></a>2.重定向Www.Domain.Com到Domain.Com</h2><p>这种操作刚好和上面的域名显示是相反的，规则如下：<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; !^domain.com$ [NC]</span><br><span class="line">RewriteRule ^(.*)$ http://domain.com/$1 [L,R=301]</span><br></pre></td></tr></table></figure></p><h2 id="3-重定向Olddomain-Com-到-Newdomain-Com"><a href="#3-重定向Olddomain-Com-到-Newdomain-Com" class="headerlink" title="3.重定向Olddomain.Com 到 Newdomain.Com"></a>3.重定向Olddomain.Com 到 Newdomain.Com</h2><p>这种操作经常用于更换域名时用到，很多站长因为种种原因可能要为站点更换域名，此时多采用以下规则来实现重新定向：<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; !olddomain.com$ [NC]</span><br><span class="line">RewriteRule ^(.*)$ http://newdomain.com/$1 [L,R=301]</span><br></pre></td></tr></table></figure></p><h2 id="4-重定向Olddomain-Com-到-Www-Newdomain-Com"><a href="#4-重定向Olddomain-Com-到-Www-Newdomain-Com" class="headerlink" title="4.重定向Olddomain.Com 到 Www.Newdomain.Com"></a>4.重定向Olddomain.Com 到 Www.Newdomain.Com</h2><p>这种操作是基于第三种方式的改良，只是显示网址显示为带www.的那种。<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; !olddomain.com$ [NC]</span><br><span class="line">RewriteRule ^(.*)$ http://www.newdomain.com/$1 [L,R=301]</span><br></pre></td></tr></table></figure></p><h2 id="5-重定向Domain-Com-File-File-Php-到-Otherdomain-Com-Otherfile-Other-Php"><a href="#5-重定向Domain-Com-File-File-Php-到-Otherdomain-Com-Otherfile-Other-Php" class="headerlink" title="5.重定向Domain.Com/File/File.Php 到 Otherdomain.Com/Otherfile/Other.Php"></a>5.重定向Domain.Com/File/File.Php 到 Otherdomain.Com/Otherfile/Other.Php</h2><p>这种操作针对于更改一个域名的同时，网站目录路径也发生变化的情况下使用，规则如下：<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteCond %&#123;HTTP_HOST&#125; ^www.domain.com$</span><br><span class="line">RewriteRule ^file/file.php$ http://www.otherdomain.com/otherfile/other.php [R=301,L]</span><br></pre></td></tr></table></figure></p><h2 id="6-IIS服务器下实现301重定向"><a href="#6-IIS服务器下实现301重定向" class="headerlink" title="6.IIS服务器下实现301重定向"></a>6.IIS服务器下实现301重定向</h2><p>具体方法如下：打开internet信息服务管理器，在欲重定向的网页或目录上按右键，选中“重定向到URL”， 在对话框中输入目标页面的地址，切记要选中“资源的永久重定向”最后点击“应用”即可。<br>注：再次提醒你，一定要选中“资源的永久重定向”。</p><h2 id="7-Apache服务器实现301重定向"><a href="#7-Apache服务器实现301重定向" class="headerlink" title="7.Apache服务器实现301重定向"></a>7.Apache服务器实现301重定向</h2><p>在Apache服务器实现301重定向的方法园子在以前的文章中提到过，只需要在.htaccess文件中加入以下规则：<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Redirect /旧目录/旧文档名 新文档的地址</span><br></pre></td></tr></table></figure></p><p>也可能是：<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Redirect /olddirectory http://www.newsite.com/newdirectory</span><br></pre></td></tr></table></figure></p><p>注：一定要注意书写格式，第一种是同一域名下将一个文档定向到新的目录地址，第二种是把老目录定义到新域名的新目录下。<br>以上七种方法是在网站管理与优化过程中经常会使用到的301重定向方法，当然，你也可能遇到不大相同的状况，这时候就需要根据自己的目的去适当调整下命令规则以适应不同的需求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解“this”</title>
      <link href="/2017/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3this/"/>
      <url>/2017/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3this/</url>
      
        <content type="html"><![CDATA[<p>在平时的代码中，相信大家经常用到 this，可是你真的明白此 this 真的是你认为的 this 吗？今天柚子君总结了一下平时用到的 this 的场景，大家走过路过不要错过啊～</p><p>首先咱们先来看一下《JavaScript 高级程序设计》上是怎么说的。</p><blockquote><p>this 对象是在运行时基于函数的执行环境绑定的：在全局函数中，this 等于 windows，而当函数被作为某个对象的方法调用时，this 等于那个对象。</p></blockquote><p>还有一种情况，在《深入理解 ES6》一书中写道:</p><blockquote><p>如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，且不能通过 call()、apply() 或 bind() 方法来改变 this 的值。<br>首先看一下非箭头函数的情况：</p></blockquote><h3 id="一、普通函数调用"><a href="#一、普通函数调用" class="headerlink" title="一、普通函数调用"></a>一、普通函数调用</h3><p>这是一个普通的函数声明，在这种情况下，this 是指向 window 的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">'哈哈哈'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">thisHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'test:'</span>,<span class="keyword">this</span>.test,<span class="string">'this:'</span>,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    thisHandler() <span class="comment">// test: 哈哈哈 this: window</span></span><br></pre></td></tr></table></figure><p>其实上面的代码就相当于 window 调用 thisHandler()，所以这时 this 指向 window：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="string">'哈哈哈'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">thisHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'b:'</span>,<span class="keyword">this</span>.b,<span class="string">'this:'</span>,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.thisHandler() <span class="comment">// b: 哈哈哈 this: window</span></span><br></pre></td></tr></table></figure></p><h3 id="二、作为对象的方法调用"><a href="#二、作为对象的方法调用" class="headerlink" title="二、作为对象的方法调用"></a>二、作为对象的方法调用</h3><p>当作为对象的方法被调用时，this 这时就指向调用它的对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> thisHandler = &#123;</span><br><span class="line">  name: <span class="string">"柚子"</span>,</span><br><span class="line">  test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'my name:'</span>,<span class="keyword">this</span>.name); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">thisHandler.test() <span class="comment">// my name: 柚子</span></span><br></pre></td></tr></table></figure><p>再来一个栗子🌰：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> thisHandler = &#123;</span><br><span class="line">  name: <span class="string">"柚子"</span>,</span><br><span class="line">  fn: &#123;</span><br><span class="line">    name: <span class="string">'芒果'</span>,</span><br><span class="line">    test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'my name:'</span>,<span class="keyword">this</span>.name); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">thisHandler.fn.test() <span class="comment">// my name: 芒果</span></span><br></pre></td></tr></table></figure><p>这时 this 指向的是对象 fn 了，所以，关于对象调用这一点明白了吗，如果明白了，那没关系，接着看下一个强化题😏：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'柚子'</span></span><br><span class="line"><span class="keyword">var</span> thisHandler = &#123;</span><br><span class="line">  name: <span class="string">"芒果"</span>,</span><br><span class="line">  fn: &#123;</span><br><span class="line">    name: <span class="string">'糖果'</span>,</span><br><span class="line">    test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'my name:'</span>,<span class="keyword">this</span>.name); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> testHandler = thisHandler.fn.test</span><br><span class="line">testHandler()</span><br></pre></td></tr></table></figure><p>🍭 这里是一秒钟分割线 🍭</p><p>哒哒哒，答对了，这里的 this 指向的 window，那么这是为什么呢，哪位小盆友来回答一下。<br>举手：</p><blockquote><p>上面说到了，this 指向的是最后调用它的对象，第一步是赋值给了 testHandler，最后执行的那一句相当于 window.testHandler()。所以这里的 this 指向的是 window。最后输出的就是 my name: 柚子。</p></blockquote><p>哒哒哒，真聪明，来闯下一关～</p><h3 id="三、构造函数的调用"><a href="#三、构造函数的调用" class="headerlink" title="三、构造函数的调用"></a>三、构造函数的调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'柚子'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'芒果'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handlerA = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(handlerA.name);  <span class="comment">// 芒果</span></span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// 柚子</span></span><br></pre></td></tr></table></figure><p>其实要明白为什么会是这样一个结果，咱们就要来聊聊 new 做了哪些事情。</p><ul><li>创建类的实例。这步是把一个空的对象的 <strong>proto</strong> 属性设置为 Bar.prototype。</li><li>初始化实例。函数 Bar 被传入参数并调用，关键字 this 被设定为该实例。</li><li>返回实例。</li></ul><p>弄明白了 new 的工作内容，自然而然的也明白了上面输出的原因。</p><blockquote><p>Bar() 中的 this 指向对象 handlerA，并不是全局对象。</p></blockquote><h3 id="四、apply-call-调用"><a href="#四、apply-call-调用" class="headerlink" title="四、apply / call 调用"></a>四、apply / call 调用</h3><p>关于 apply，可以看一下 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">MDN 关于 apply() 方法的说明</a>。</p><p>使用 apply 方法可以改变 this 的指向。如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动指向全局对象（浏览器中就是window对象）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'芒果'</span>;</span><br><span class="line"><span class="keyword">var</span> thisHandler = &#123;</span><br><span class="line">  name: <span class="string">"柚子"</span>,</span><br><span class="line">  test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'my name:'</span>,<span class="keyword">this</span>.name); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">thisHandler.test(); <span class="comment">//  my name: 柚子</span></span><br><span class="line">thisHandler.test.apply(); <span class="comment">// my name: 芒果</span></span><br></pre></td></tr></table></figure><p>下面是箭头函数的舞台～</p><h3 id="五、箭头函数"><a href="#五、箭头函数" class="headerlink" title="五、箭头函数"></a>五、箭头函数</h3><p>在《深入理解 ES6》一书中可以知道箭头函数和普通函数的一个不同之处就在于 this 的绑定。</p><blockquote><p>箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值。如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this；否则，this 的值会被设置为 undefined。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'柚子'</span></span><br><span class="line"><span class="keyword">var</span> thisHandler = &#123;</span><br><span class="line">  name: <span class="string">'芒果'</span>,</span><br><span class="line">  test:<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'my name:'</span>,<span class="keyword">this</span>.name,<span class="string">'this:'</span>,<span class="keyword">this</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">thisHandler.test(); <span class="comment">// my name: 柚子 this: Window</span></span><br></pre></td></tr></table></figure><p>这时 this 不是指向 thisHandler，而是 Window。</p><p>关于 this 的使用和体会还是要在平时运用中理解，先了解其原理，那么在使用的时候就如鱼得水啦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10远程桌面时，用户名密码无误，仍然提示不正确的解决办法</title>
      <link href="/2017/06/21/%E8%A7%A3%E5%86%B3win10%20%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E5%90%8D%E6%88%96%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98/"/>
      <url>/2017/06/21/%E8%A7%A3%E5%86%B3win10%20%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E5%90%8D%E6%88%96%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在被远程的计算机进行设置</p><p>开始–&gt;运行-&gt;gpedit.msc-&gt;计算机配置-&gt;Windows设置-&gt;安全设置-&gt;本地策略-&gt;安全选项-&gt;网络访问:本地帐户的共享和安全模型。</p><p>修改为使用经典模式，如下图示<br><img src="https://cdn.1024yun.com/win10-remote-seting.png" alt="win10-remote-seting"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery中的append和prepend，after和before的区别和用法</title>
      <link href="/2017/06/15/jQuery%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2017/06/15/jQuery%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、after-和before-方法的区别"><a href="#一、after-和before-方法的区别" class="headerlink" title="一、after()和before()方法的区别"></a>一、after()和before()方法的区别</h2><p>after()方法是将方法里面的参数添加到jQuery对象后面去；<br>如：A.after(B)的意思是在A的后面添加B，B在A标签的外面；<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是目标元素的内容<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是目标元素子元素的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="string">"div"</span>).after(<span class="string">'&lt;a href="http://tuohuang.github.io"&gt;这是after函数加上去的内容&lt;/a&gt;'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后的结果是：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是目标元素的内容<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是目标元素子元素的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://tuohuang.github.io"</span>&gt;</span>这是after函数加上去的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>before()方法是将方法里面的参数添加到jQuery对象前面去。<br>如：A.before(B)的意思是在A的前面添加B，B在A标签的外面；<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是目标元素的内容<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是目标元素子元素的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="string">"div"</span>).before(<span class="string">'&lt;a href="http://tuohuang.github.io"&gt;这是before函数加上去的内容&lt;/a&gt;'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后的结果是：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://tuohuang.github.io"</span>&gt;</span>这是before函数加上去的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是目标元素的内容<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是目标元素子元素的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span></span></span><br></pre></td></tr></table></figure></p><h2 id="二、insertAfter-和insertBefore-的方法的区别"><a href="#二、insertAfter-和insertBefore-的方法的区别" class="headerlink" title="二、insertAfter()和insertBefore()的方法的区别"></a>二、insertAfter()和insertBefore()的方法的区别</h2><p>其实是将元素对调位置；<br>可以是页面上已有元素；也可以是动态添加进来的元素。<br>如：A.insertAfter(B);即将A元素调换到B元素后面；<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="string">"div"</span>).insertAfter($(<span class="string">"span"</span>))</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后的结果是：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="三、append-和appendTo-方法的区别"><a href="#三、append-和appendTo-方法的区别" class="headerlink" title="三、append()和appendTo()方法的区别"></a>三、append()和appendTo()方法的区别</h2><p>append()方法是将方法里面的参数添加到jQuery对象中来；<br>如：A.append(B)的意思是将B放到A的里面，且紧靠着A的闭合标签；<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是目标元素的内容<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是目标元素子元素的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="string">"div"</span>).append(<span class="string">'&lt;a href="http://tuohuang.github.io"&gt;这是append函数加上去的内容&lt;/a&gt;'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后的结果是：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    这是目标元素的内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是目标元素子元素的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://tuohuang.github.io"</span>&gt;</span>这是append函数加上去的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>appendTo()方法是将jQuery对象添加到appendTo指定的元素中去。<br>如：B.appendTo(A)的意思和上面A.append(B)是一样的</p><h2 id="四、prepend-和prependTo-方法的区别"><a href="#四、prepend-和prependTo-方法的区别" class="headerlink" title="四、prepend()和prependTo()方法的区别"></a>四、prepend()和prependTo()方法的区别</h2><p>prepend()方法是将方法里面的参数添加到jQuery对象中来；<br>如：A.prepend(B)的意思是将B放到A的里面，且紧靠着A的开始标签；<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是目标元素的内容<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是目标元素子元素的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="string">"div"</span>).prepend(<span class="string">'&lt;a href="http://tuohuang.github.io"&gt;这是prepend函数加上去的内容&lt;/a&gt;'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后的结果是：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://tuohuang.github.io"</span>&gt;</span>这是prepend函数加上去的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    这是目标元素的内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是目标元素子元素的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>prependTo()方法是将jQuery对象添加到prependTo指定的元素中去。<br>如：B.prependTo(A)的意思和上面A.prepend(B)是一样的</p>]]></content>
      
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装MySQL</title>
      <link href="/2017/06/14/centos%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/2017/06/14/centos%E5%AE%89%E8%A3%85MySQL/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载mysql的repo源"><a href="#1-下载mysql的repo源" class="headerlink" title="1. 下载mysql的repo源"></a>1. 下载mysql的repo源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">--2017-06-14 11:32:25--  http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">Resolving dev.mysql.com (dev.mysql.com)... 137.254.60.11</span><br><span class="line">Connecting to dev.mysql.com (dev.mysql.com)|137.254.60.11|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 301 Moved Permanently</span><br><span class="line">Location: https://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm [following]</span><br><span class="line">--2017-06-14 11:32:26--  https://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">Connecting to dev.mysql.com (dev.mysql.com)|137.254.60.11|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 302 Found</span><br><span class="line">Location: https://repo.mysql.com//mysql-community-release-el7-5.noarch.rpm [following]</span><br><span class="line">--2017-06-14 11:32:27--  https://repo.mysql.com//mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">Resolving repo.mysql.com (repo.mysql.com)... 23.211.97.88</span><br><span class="line">Connecting to repo.mysql.com (repo.mysql.com)|23.211.97.88|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 6140 (6.0K) [application/x-redhat-package-manager]</span><br><span class="line">Saving to: ‘mysql-community-release-el7-5.noarch.rpm’</span><br><span class="line"></span><br><span class="line">100%[===========================================================&gt;] 6,140       --.-K/s   in 0s      </span><br><span class="line"></span><br><span class="line">2017-06-14 11:32:27 (269 MB/s) - ‘mysql-community-release-el7-5.noarch.rpm’ saved [6140/6140]</span><br></pre></td></tr></table></figure><h3 id="2-安装mysql-community-release-el7-5-noarch-rpm包"><a href="#2-安装mysql-community-release-el7-5-noarch-rpm包" class="headerlink" title="2. 安装mysql-community-release-el7-5.noarch.rpm包"></a>2. 安装mysql-community-release-el7-5.noarch.rpm包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">package mysql-community-release-el7-5.noarch is already installed</span><br></pre></td></tr></table></figure><h3 id="3-安装mysql"><a href="#3-安装mysql" class="headerlink" title="3. 安装mysql"></a>3. 安装mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum install mysql-community-server</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Repository epel is listed more than once in the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * remi-safe: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package mysql-community-server.x86_64 0:5.6.36-2.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: mysql-community-client(x86-64) &gt;= 5.6.10 for package: mysql-community-server-5.6.36-2.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package mysql-community-client.x86_64 0:5.6.36-2.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: mysql-community-libs(x86-64) &gt;= 5.6.10 for package: mysql-community-client-5.6.36-2.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package mysql-community-libs.x86_64 0:5.6.36-2.el7 will be installed</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">=====================================================================================================</span><br><span class="line"> Package                        Arch           Version               Repository                 Size</span><br><span class="line">=====================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> mysql-community-server         x86_64         5.6.36-2.el7          mysql56-community          59 M</span><br><span class="line">Installing for dependencies:</span><br><span class="line"> mysql-community-client         x86_64         5.6.36-2.el7          mysql56-community          19 M</span><br><span class="line"> mysql-community-libs           x86_64         5.6.36-2.el7          mysql56-community         2.0 M</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">=====================================================================================================</span><br><span class="line">Install  1 Package (+2 Dependent packages)</span><br><span class="line"></span><br><span class="line">Total download size: 81 M</span><br><span class="line">Installed size: 349 M</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">(1/3): mysql-community-libs-5.6.36-2.el7.x86_64.rpm                           | 2.0 MB  00:00:00     </span><br><span class="line">(2/3): mysql-community-client-5.6.36-2.el7.x86_64.rpm                         |  19 MB  00:00:01     </span><br><span class="line">(3/3): mysql-community-server-5.6.36-2.el7.x86_64.rpm                         |  59 MB  00:00:04     </span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line">Total                                                                 17 MB/s |  81 MB  00:00:04     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : mysql-community-libs-5.6.36-2.el7.x86_64                                          1/3 </span><br><span class="line">  Installing : mysql-community-client-5.6.36-2.el7.x86_64                                        2/3 </span><br><span class="line">  Installing : mysql-community-server-5.6.36-2.el7.x86_64                                        3/3 </span><br><span class="line">  Verifying  : mysql-community-server-5.6.36-2.el7.x86_64                                        1/3 </span><br><span class="line">  Verifying  : mysql-community-libs-5.6.36-2.el7.x86_64                                          2/3 </span><br><span class="line">  Verifying  : mysql-community-client-5.6.36-2.el7.x86_64                                        3/3 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  mysql-community-server.x86_64 0:5.6.36-2.el7                                                       </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  mysql-community-client.x86_64 0:5.6.36-2.el7       mysql-community-libs.x86_64 0:5.6.36-2.el7      </span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><p>如果报错尝试更新一下yum:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">rpm --rebuilddb</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure></p><h3 id="4-安装完之后重启一下mysql服务："><a href="#4-安装完之后重启一下mysql服务：" class="headerlink" title="4. 安装完之后重启一下mysql服务："></a>4. 安装完之后重启一下mysql服务：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service mysqld restart</span><br><span class="line">Redirecting to /bin/systemctl restart  mysqld.service</span><br></pre></td></tr></table></figure><h3 id="5-输入mysql-没有设置用户和密码就可以直接连接-就可以连接到服务器"><a href="#5-输入mysql-没有设置用户和密码就可以直接连接-就可以连接到服务器" class="headerlink" title="5. 输入mysql(没有设置用户和密码就可以直接连接)就可以连接到服务器"></a>5. 输入mysql(没有设置用户和密码就可以直接连接)就可以连接到服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.6.36 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="6-重置密码"><a href="#6-重置密码" class="headerlink" title="6. 重置密码"></a>6. 重置密码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; = password(&apos;password&apos;);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit</span><br></pre></td></tr></table></figure><h3 id="7-用新密码重新连接MySQL"><a href="#7-用新密码重新连接MySQL" class="headerlink" title="7. 用新密码重新连接MySQL"></a>7. 用新密码重新连接MySQL</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 9</span><br><span class="line">Server version: 5.6.36 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="8-创建普通用户并授权-安装后默认一个账号是root-如果打算用root账户则可以不创建新用户"><a href="#8-创建普通用户并授权-安装后默认一个账号是root-如果打算用root账户则可以不创建新用户" class="headerlink" title="8. 创建普通用户并授权(安装后默认一个账号是root,如果打算用root账户则可以不创建新用户)"></a>8. 创建普通用户并授权(安装后默认一个账号是root,如果打算用root账户则可以不创建新用户)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on openscannerstore.* to &apos;userName&apos;@&apos;localhost&apos; identified by &apos;password&apos;;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="9-设置任何机器都可以访问MySQL"><a href="#9-设置任何机器都可以访问MySQL" class="headerlink" title="9. 设置任何机器都可以访问MySQL"></a>9. 设置任何机器都可以访问MySQL</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to userName@&quot;%&quot; identified by &apos;password&apos; with grant option;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="10-设置开机启动"><a href="#10-设置开机启动" class="headerlink" title="10. 设置开机启动"></a>10. 设置开机启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>添加service mysqld start<br>或者执行下面的命令:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig --list | grep mysqld</span><br><span class="line">chkconfig mysqld on</span><br></pre></td></tr></table></figure></p><h3 id="11-设置最大连接数"><a href="#11-设置最大连接数" class="headerlink" title="11. 设置最大连接数"></a>11. 设置最大连接数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编辑  /etc/my.cnf  添加如下一行，注意是在[mysqld] 区域下面添加 而不是最后，最后添加是不生效的</span><br><span class="line">max_connections = 260</span><br></pre></td></tr></table></figure><p>重启服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service mysqld restart</span><br><span class="line">Redirecting to /bin/systemctl restart  mysqld.service</span><br></pre></td></tr></table></figure></p><p>连接mysql查看最大连接数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;max_connections&apos;;</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections | 260   |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="12-设置白名单"><a href="#12-设置白名单" class="headerlink" title="12. 设置白名单"></a>12. 设置白名单</h3><p>MySQL一般端口都是3306  所以可以配置防火墙的3306端口所允许的ip就可以了，如果用的是阿里云的ecs网络是专业网络，则只需要在安全组中加入3306端口并添加ip白名单即可</p><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费申请企业级1年期Office 365订阅权限</title>
      <link href="/2017/06/10/office365%E7%94%B3%E8%AF%B7/"/>
      <url>/2017/06/10/office365%E7%94%B3%E8%AF%B7/</url>
      
        <content type="html"><![CDATA[<ol><li>前往 Microsoft Office 365 开发者计划主页：<a href="https://dev.office.com/devprogram" target="_blank" rel="noopener">https://dev.office.com/devprogram</a><br><img src="https://cdn.1024yun.com/office365-joinnow.png" alt="office365-joinnow"></li><li><p>点击上图中的<a href="https://profile.microsoft.com/RegSysProfileCenter/wizardnp.aspx?wizid=7a6e3d71-b057-49cc-b2aa-158ff23432f3&amp;lcid=1033" target="_blank" rel="noopener">JOIN NOW</a>按钮即可看到填写详细表单的选项，如果有真实项目就实际填写否则自己编：</p></li><li><p>提交过后稍等片刻你的邮箱就会收到来自微软的开通邮件，如下图点击Redeem Today即可进入激活：<br><img src="https://cdn.1024yun.com/office365-redeem-today.png" alt="Redeem-Today"></p></li><li>选择区域并填写诸如姓名、密码、公司名称等选项然后进入下一步：<br><img src="https://cdn.1024yun.com/setting-info.png" alt></li><li>接下来创建你的管理员ID并输入密码等信息，下列表单中前缀和公司域名等可以自定义设置：<br><img src="https://cdn.1024yun.com/crea-id.png" alt></li><li>需要经过短信验证：选择中国的区号+86然后输入你的手机号码，请注意不要使用已申请过的手机号码：<br><img src="https://cdn.1024yun.com/sms.png" alt></li><li>接下来你的管理员账号就已经创建成功了可以登录到Office 365企业版订阅控制台了：<br><img src="https://cdn.1024yun.com/welcom-office365.png" alt></li><li>登录进去之后请点击首页的管理员按钮进入高级配置，例如绑定域名和创建账号等等：<br><img src="https://cdn.1024yun.com/office365-admin.png" alt></li><li>在管理员首页即可看到添加用户的选项，剩下这些你可以自己随便写了：<br><img src="https://cdn.1024yun.com/office365-add-user.png" alt></li><li>进阶：如果你拥有自己的独立域名那么还可以绑定该域名，这个在管理员的域设置里：<br><img src="https://cdn.1024yun.com/office365-admin.png" alt></li></ol><p>绑定自己的域名你就可以使用某个前缀艾特你的域名，但请注意CNAME解析不影响其他、DNS服务器托管的话会影响到你其他的域名解析！</p><p>1年期订阅权限到期后你可以选择继续付费继续使用，也可以转移到其他可以使用的 Office 365 账号上去。</p><p>如果 1 年之后微软关闭这个的话那么不能申请新的不付费的话，这些账号以及保存的数据都会被清除掉了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 办公技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统下搭建React Native环境</title>
      <link href="/2017/05/24/Windows-for-React%20Native-Dev/"/>
      <url>/2017/05/24/Windows-for-React%20Native-Dev/</url>
      
        <content type="html"><![CDATA[<h2 id="一、开发环境搭建要求"><a href="#一、开发环境搭建要求" class="headerlink" title="一、开发环境搭建要求"></a>一、开发环境搭建要求</h2><p>在Windows操作系统搭建React Native开发环境要求在电脑上安装好JDK,Android SDK,还要求电脑上安装有一套C++编译器，如果没有，推荐安装微软的VIsual Studio Community 2015 Android的开发环境Android Studio(推荐)或者Eclipse在混合开发中也需要用到</p><h2 id="二、环境搭建步骤"><a href="#二、环境搭建步骤" class="headerlink" title="二、环境搭建步骤"></a>二、环境搭建步骤</h2><h3 id="第一步：安装JDK"><a href="#第一步：安装JDK" class="headerlink" title="第一步：安装JDK"></a>第一步：安装JDK</h3><h4 id="1-安装JAVA-JDK（需安装1-8或更高版本）"><a href="#1-安装JAVA-JDK（需安装1-8或更高版本）" class="headerlink" title="1.安装JAVA JDK（需安装1.8或更高版本）"></a>1.安装JAVA JDK（需安装1.8或更高版本）</h4><p>去Oracle的官网上下载安装包<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 然后安装。第一次是安装 jdk ，第二次是安装 jre 。建议两个都安装在同一个java文件夹中的不同文件夹中。</p><h4 id="2-JDK环境变量配置"><a href="#2-JDK环境变量配置" class="headerlink" title="2.JDK环境变量配置"></a>2.JDK环境变量配置</h4><p>(1)选择  计算机→属性→高级系统设置→高级→环境变量</p><p>(2)系统变量→新建 JAVA_HOME 变量 。变量值填写jdk的安装目录（我的是 D:\Program Files\Java\jdk1.8.0_131)</p><p>(3)系统变量→寻找 Path 变量→编辑,在变量值最后输入%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p><p>(4)系统变量→新建 CLASSPATH 变量。变量值填写.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面有一点）</p><p>(5)检验是否配置成功 运行cmd 输入 java -version （java 和 -version 之间有空格）。若如图所示 显示版本信息 则说明安装和配置成功。<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">PS C:\Users\tuohuang&gt;  java -version</span><br><span class="line">java version "<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_131"</span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_131-b11)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25</span>.<span class="number">131</span>-b11, mixed <span class="built_in">mode</span>)</span><br></pre></td></tr></table></figure></p><h3 id="第二步：安装Android环境"><a href="#第二步：安装Android环境" class="headerlink" title="第二步：安装Android环境"></a>第二步：安装Android环境</h3><p>我们先去Google的开发者网站<a href="https://developer.android.google.cn/studio/index.html" target="_blank" rel="noopener">https://developer.android.google.cn/studio/index.html</a> 上下载Android Studio。</p><p>安装完成后，在Android Studio的欢迎界面中选择Configure =&gt; SDK Manager。<br>在SDK Platforms窗口中，选择Show Package Details，然后勾选Android 6.0下的Google APIs，Android SDK Platform 23，Intel x86 Atom_64 System Image还有Google APIs Intel x86 Atom_64 System Image。<br><img src="https://cdn.1024yun.com/SDK%20Platforms.png" alt="SDK Platforms"><br>在SDK Tools窗口中，选择Show Package Details，然后在Android SDK Build Tools中勾选Android SDK Build-Tools 23.0.1。（必须是这个版本）<br><img src="https://cdn.1024yun.com/SDK%20Tools.png" alt="SDK Tools"><br>ANDROID_HOME环境变量<br>确保ANDROID_HOME环境变量正确地指向了你安装的Android SDK的路径。<br>打开控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 新建<br>我的路径是：D:\Android\sdk（安装Android Studio的时候可以自己选择路径）;然后PATH增加如下内容 %ANDROID_HOME%\platforms;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;<br>设置完成后将手机与电脑通过数据线相连。（打开开发者调试模式）在命令行窗口输入“adb devices”如果手机上已经安装了正确的驱动程序并且打开了调试模式，则会显示你已经连接的设备：<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">PS C:\Users\tuohuang&gt; adb devices</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="number">192</span>.<span class="number">168</span>.<span class="number">25</span>.<span class="number">101</span>:<span class="number">5555</span>     device</span><br></pre></td></tr></table></figure></p><h3 id="第三步：其他环境配置"><a href="#第三步：其他环境配置" class="headerlink" title="第三步：其他环境配置"></a>第三步：其他环境配置</h3><p>建议安装上Python 2.7,有些可能不装也没事   下载地址  <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a>   安装git   安装React-native需要用到git，如果没有配置git，需要先下载对应的客户端   下载地址：<a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">https://git-for-windows.github.io/</a></p><h3 id="第四步：RN环境设置和搭建"><a href="#第四步：RN环境设置和搭建" class="headerlink" title="第四步：RN环境设置和搭建"></a>第四步：RN环境设置和搭建</h3><h4 id="1-下载稳定版-nodejs-v5-7-0-Stable下载网站-https-nodejs-org-en"><a href="#1-下载稳定版-nodejs-v5-7-0-Stable下载网站-https-nodejs-org-en" class="headerlink" title="1. 下载稳定版 nodejs v5.7.0 Stable下载网站 https://nodejs.org/en/"></a>1. 下载稳定版 nodejs v5.7.0 Stable下载网站 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></h4><h4 id="2-安装后命令行输入npm测试是否成功"><a href="#2-安装后命令行输入npm测试是否成功" class="headerlink" title="2. 安装后命令行输入npm测试是否成功"></a>2. 安装后命令行输入npm测试是否成功</h4><h4 id="3-React-Developer-Tools安装"><a href="#3-React-Developer-Tools安装" class="headerlink" title="3. React Developer Tools安装"></a>3. React Developer Tools安装</h4><h4 id="4-安装React-Native。在终端中执行"><a href="#4-安装React-Native。在终端中执行" class="headerlink" title="4. 安装React Native。在终端中执行"></a>4. 安装React Native。在终端中执行</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure><p>react-native-cli是一个终端命令，它可以完成其余的设置工作。它可以通过npm安装。刚才这条命令会往你的终端安装一个叫做react-native的命令。这个安装过程你只需要进行一次。</p><p>然后安装Yarn<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install yarn -g</span><br></pre></td></tr></table></figure></p><h2 id="三、创建并启动APP"><a href="#三、创建并启动APP" class="headerlink" title="三、创建并启动APP"></a>三、创建并启动APP</h2><p>在启动App之前，我们得创建一个新的项目在终端输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">react-native init 项目名</span><br></pre></td></tr></table></figure></p><p>可能会很慢，等等就好，大概200多M的文件,一次不成功，也可以尝试着多试几次或者直接到GitHub上去下载一个初始化项目。<br>进入上面使用init命令建立的项目名称目录下 ，新的npm包会包含更新在运行react-nativeinit命令生成的一些动态文件，例如init创建项目的时候会生成iOS和Android的子项目，我们可以通过以下的命令进行获取最新的代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">react-native upgrade</span><br></pre></td></tr></table></figure></p><p>然后执行一下代码来启动项目<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">react-native run-android</span><br></pre></td></tr></table></figure></p><p>需要耐心等待一段时间，如果出现以下内容则说明运行成功了：<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">:app:transformResourcesWithMergeJavaResForDebug UP-TO-<span class="built_in">DATE</span></span><br><span class="line">:app:validateSigningDebug</span><br><span class="line">:app:packageDebug UP-TO-<span class="built_in">DATE</span></span><br><span class="line">:app:assembleDebug UP-TO-<span class="built_in">DATE</span></span><br><span class="line">:app:installDebug</span><br><span class="line">Installing APK 'app-debug.apk' on 'Custom Phone - <span class="number">4</span>.<span class="number">4</span>.<span class="number">4</span> - API <span class="number">19</span> - <span class="number">768</span>x1280 - <span class="number">4</span>.<span class="number">4</span>.<span class="number">4</span>' <span class="keyword">for</span> app:debug</span><br><span class="line">Installed on <span class="number">1</span> device.</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total <span class="built_in">time</span>: <span class="number">40</span>.<span class="number">866</span> secs</span><br><span class="line">Starting the app on <span class="number">192</span>.<span class="number">168</span>.<span class="number">25</span>.<span class="number">101</span>:<span class="number">5555</span> (D:\Android\sdk/platform-tools/adb -s <span class="number">192</span>.<span class="number">168</span>.<span class="number">25</span>.<span class="number">101</span>:<span class="number">5555</span> shell am <span class="built_in">start</span> -n com.meituan/.MainActivity)...</span><br><span class="line"><span class="function">Starting: <span class="title">Intent</span> &#123; <span class="title">cmp</span>=<span class="title">com.meituan</span>/.<span class="title">MainActivity</span> &#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Apache和PHP</title>
      <link href="/2017/05/17/centos%E5%AE%89%E8%A3%85apache/"/>
      <url>/2017/05/17/centos%E5%AE%89%E8%A3%85apache/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>一个 LAMP 软件栈通常由多个开源软件组合而成，它们合力驱动一个服务器去运行 web 站点和应用。LAMP 这个术语实际上是一个由 Linux 操作系统，Apache web 服务器，MySQL 数据库服务器，以及 PHP 编程环境组合缩略而成的。</p><p>在这篇指南中，我们将为一个搭载 CentOS 7 操作系统的服务器安装 LAMP 软件栈。CentOS 已经满足了 LAMP 软件栈的第一个需求：一个 Linux 操作系统。</p><h2 id="第一步——安装Apache"><a href="#第一步——安装Apache" class="headerlink" title="第一步——安装Apache"></a>第一步——安装Apache</h2><p>安装 Apache 只需要在 CentOS 命令终端敲入这条命令就行了：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install httpd -y</span><br></pre></td></tr></table></figure></p><p>安装成功后执行下面的命令来开启 Apache 服务：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl enable httpd.service</span><br></pre></td></tr></table></figure></p><p>CentOS7.0以下版本需要如下命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig --level 3 httpd on //开机启动</span><br></pre></td></tr></table></figure></p><p>你可以通过重新启动服务器，然后在命令行终端中敲入这条命令来验证 Apache 服务是否在服务器启动时自动开启了：<br>重启Linux:</p><ol><li>reboot</li><li>shutdown -r now 立刻重启(root用户使用)</li><li>shutdown -r 10 过10分钟自动重启(root用户使用)</li><li>shutdown -r 20:35 在时间为20:35时候重启(root用户使用)<br>如果是通过shutdown命令设置重启的话，可以用shutdown -c命令取消重启<br>然后：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl is-enabled httpd.service</span><br></pre></td></tr></table></figure></li></ol><p>如果你看到了这样的响应：</p><p>enabled</p><p>则说明 Apache 服务已经配置为在服务器启动时自动开启了。</p><p>在服务器上启动 Apache 服务的命令为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo systemctl start httpd.service</span><br></pre></td></tr></table></figure></p><p>重新启动 Apache：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo systemctl restart httpd.service</span><br></pre></td></tr></table></figure></p><p>停止 Apache：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo systemctl stop httpd.service</span><br></pre></td></tr></table></figure></p><p>CentOS7.0以下版本需要如下命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service httpd start 启动</span><br><span class="line">service httpd restart 重新启动</span><br><span class="line">service httpd stop 停止服务</span><br></pre></td></tr></table></figure></p><p>如果你的服务器正在运行防火墙，请运行下列命令以允许它进行 HTTP 和 HTTPS 通信：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line"></span><br><span class="line">$sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line"></span><br><span class="line">$sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>在 Apache 启动的情况下，你可以在浏览器里访问服务器的公网 IP 地址以验证一切如计划那样顺利地进行（如果你现在还不知道如何获取服务器的公网 IP 地址，请参考下一标题中的内容）：</p><p>http://&lt;服务器的公网 IP 地址&gt;/</p><p>你将会看到一个出于通知和测试目的而存在的默认 CentOS 7 Apache 网页。它应该长这样子：<br><img src="https://cdn.1024yun.com/apache.png" alt="Apache信息页面"><br>如果你使用的是阿里云服务器的网络是专有网络则可能访问不成功，因为阿里云的专有网络需要在在安全组里面放行80端口如下：<br><img src="https://cdn.1024yun.com/anquanzu.png" alt="安全组页面"><br>如果不是阿里云的专有网络则可能是服务器默认开启了防火墙，且防火墙没有设置80端口：<br>开启防火墙：</p><h2 id="firewalld的配置"><a href="#firewalld的配置" class="headerlink" title="firewalld的配置"></a>firewalld的配置</h2><h3 id="1、firewalld的基本使用"><a href="#1、firewalld的基本使用" class="headerlink" title="1、firewalld的基本使用"></a>1、firewalld的基本使用</h3><p>启动： systemctl start firewalld<br>查看状态： systemctl status firewalld<br>停止： systemctl disable firewalld<br>禁用： systemctl stop firewalld</p><h3 id="2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"><a href="#2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。" class="headerlink" title="2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"></a>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</h3><p>启动一个服务：systemctl start firewalld.service<br>关闭一个服务：systemctl stop firewalld.service<br>重启一个服务：systemctl restart firewalld.service<br>显示一个服务的状态：systemctl status firewalld.service<br>在开机时启用一个服务：systemctl enable firewalld.service<br>在开机时禁用一个服务：systemctl disable firewalld.service<br>查看服务是否开机启动：systemctl is-enabled firewalld.service<br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br>查看启动失败的服务列表：systemctl –failed</p><h3 id="3-配置firewalld-cmd"><a href="#3-配置firewalld-cmd" class="headerlink" title="3.配置firewalld-cmd"></a>3.配置firewalld-cmd</h3><p>查看版本： firewall-cmd –version<br>查看帮助： firewall-cmd –help<br>显示状态： firewall-cmd –state<br>查看所有打开的端口： firewall-cmd –zone=public –list-ports<br>更新防火墙规则： firewall-cmd –reload<br>查看区域信息:  firewall-cmd –get-active-zones<br>查看指定接口所属区域： firewall-cmd –get-zone-of-interface=eth0<br>拒绝所有包：firewall-cmd –panic-on<br>取消拒绝状态： firewall-cmd –panic-off<br>查看是否拒绝： firewall-cmd –query-panic</p><h3 id="4-添加、查看、删除端口"><a href="#4-添加、查看、删除端口" class="headerlink" title="4.添加、查看、删除端口"></a>4.添加、查看、删除端口</h3><p>添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent    //（--permanent永久生效，没有此参数重启后失效）</span><br></pre></td></tr></table></figure></p><p>重新载入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>查看<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone= public --query-port=80/tcp</span><br></pre></td></tr></table></figure></p><p>删除<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></p><h2 id="第二步-——-安装-PHP"><a href="#第二步-——-安装-PHP" class="headerlink" title="第二步 —— 安装 PHP"></a>第二步 —— 安装 PHP</h2><p>执行下面的命令安装php<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$yum install php -y</span><br></pre></td></tr></table></figure></p><p>安装成功后执行如下命令查看php的版本和php的模块<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -v</span><br><span class="line">php -m</span><br></pre></td></tr></table></figure></p><p>为了增强 PHP 的功能，我们可以选择性地安装一些额外的模块。</p><p>在命令行终端敲入这条命令，你就可以找到所有可以获取到的 PHP 模块选项和库：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum search php</span><br></pre></td></tr></table></figure></p><p>响应的结果就是所有你能够选择安装的组件。其中包含了每个可选组件的描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php-bcmath.x86_64 : A module for PHP applications for using the bcmath library</span><br><span class="line"></span><br><span class="line">php-cli.x86_64 : Command-line interface for PHP</span><br><span class="line"></span><br><span class="line">php-common.x86_64 : Commonfiles for PHP</span><br><span class="line"></span><br><span class="line">php-dba.x86_64 : Adatabase abstraction layer module for PHP applications</span><br><span class="line"></span><br><span class="line">php-devel.x86_64 : Filesneeded for building PHP extensions</span><br><span class="line"></span><br><span class="line">php-embedded.x86_64 : PHPlibrary for embedding in applications</span><br><span class="line"></span><br><span class="line">php-enchant.x86_64 : Enchantspelling extension for PHP applications</span><br><span class="line"></span><br><span class="line">php-fpm.x86_64 : PHPFastCGI Process Manager</span><br><span class="line"></span><br><span class="line">php-gd.x86_64 : Amodule for PHP applications for using the gd graphics library</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>如果需要获取每个模块更多的信息，你可以通过互联网搜索，或者直接在命令行终端中敲入这条命令查看：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum info package_name</span><br></pre></td></tr></table></figure></p><p>响应中将会包含许多的信息，其中一个名为 Description 的域包含了这个模块提供的功能更为详尽的描述。</p><p>举个例子，如果要获知 php-fpm 模块的功能，我们只要在命令行终端中敲入下列指令就可以了：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum info php-fpm</span><br></pre></td></tr></table></figure></p><p>顺着众多其他信息往下看，你将会找到形如这样的信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">Summary    : PHPFastCGI Process Manager</span><br><span class="line"></span><br><span class="line">URL            : http://www.php.net/</span><br><span class="line"></span><br><span class="line">License       : PHPand Zend and BSD</span><br><span class="line"></span><br><span class="line">Description : PHP-FPM (FastCGI Process Manager) is an alternative PHP FastCGI</span><br><span class="line"></span><br><span class="line">                   : implementation with some additional features useful for sites of</span><br><span class="line"></span><br><span class="line">                   : any size, especially busier sites.</span><br></pre></td></tr></table></figure></p><p>在考究之后，如果你决定要安装一个模块包，你可以像我们之前安装其他软件时的做法一样，使用 yum install 命令达到目的。</p><p>如果我们决定了 php-fpm 就是我们需要的，那么我们可以在命令行终端键入：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install php-fpm</span><br></pre></td></tr></table></figure></p><p>如果你想安装多于 1 个的模块包，你可以在命令行终端中键入 yum install 后，列出你想安装的每个模块包，并使用空格区分，就像下面这样子，一般来说安装以下模块包就足够了：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-iconv php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt -y</span><br></pre></td></tr></table></figure></p><p>现在，你的 LAMP 软件栈已经安装并配置妥当了。但我们仍需要测试一下 PHP。</p><h2 id="第三步-——-测试你-Web-服务器上的-PHP-处理程序"><a href="#第三步-——-测试你-Web-服务器上的-PHP-处理程序" class="headerlink" title="第三步 —— 测试你 Web 服务器上的 PHP 处理程序"></a>第三步 —— 测试你 Web 服务器上的 PHP 处理程序</h2><p>为了测试系统已经配置得适合 PHP 运行，我们可以创建一个非常简易的 PHP 脚本。</p><p>我们将这个脚本命名为 info.php。为了让 Apache 能够正确地找到并为之服务，它必须保存在一个称为『web 目录』特殊的目录中。</p><p>在 CentOS 7 中，这个目录位于 /var/www/html/。我们可以通过下面这条命令在此创建一个文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vi /var/www/html/info.php</span><br></pre></td></tr></table></figure></p><p>这将会打开一个空白文件，敲击小写字母 I 即可进行编辑。我们想在文件中输入下列 PHP 代码组成的文本：</p><p>&lt;?php phpinfo(); ?&gt;</p><p>然后，敲击 ESC 键并键入 :wq! 即可保存并关闭这个文件。</p><p>现在我们可以测试 web 服务器是否能够正确地显示由 PHP 脚本生成的内容了。我们可以尝试通过 web 浏览器访问这个页面。你需要再次获取服务器的公网 IP 地址。</p><p>你希望访问的地址就是：</p><p>http://&lt;服务器的公网 IP 地址&gt;/info.php</p><p>你看到的页面应该像下面这样子：</p><p><img src="https://cdn.1024yun.com/phpInfo.png" alt="phpInfo"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Apache </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS输出二维数组所有组合拼接的函数</title>
      <link href="/2017/05/05/JS%E8%BE%93%E5%87%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%89%80%E6%9C%89%E7%BB%84%E5%90%88%E6%8B%BC%E6%8E%A5%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2017/05/05/JS%E8%BE%93%E5%87%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%89%80%E6%9C%89%E7%BB%84%E5%90%88%E6%8B%BC%E6%8E%A5%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>在做一个商品发布功能的时候遇到需要选择规格的功能，且规格可能是多个，每个又有多个规格值，多个规格之间搭配还可能有多种价格和库存，如下图：<br><img src="https://cdn.1024yun.com/select-guige.png" alt="示例图"><br>首先想到的是当每个规格中都有选中的选项的时候将选中的数据以二位数组的形式先存起来；<br>先声明一个数组：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure></p><p>获取规格类型的数量和声明一个用来计数的变量<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> guigeCell = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"guige-cell"</span>);</span><br><span class="line"><span class="keyword">var</span> guigeCellNum = guigeCell.length;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>当点击一个规格值的时候给这个规格加上一个class(selected)，这个class既可以是选中后的样式也可以用来标记这个规格有值被选中了，然后让 j 加一；<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.className===<span class="string">'unit-item-option'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = <span class="string">'unit-item-option selected'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = <span class="string">'unit-item-option'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;guigeCellNum;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(guigeCell[i].getElementsByClassName(<span class="string">"selected"</span>).length!=<span class="number">0</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//判断所有的规格是否都有被选中的项,然后将每个规格中的值再以数组的形式存储</span></span><br><span class="line">    <span class="keyword">if</span>(j===guigeCellNum)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;guigeCellNum;i++)&#123;</span><br><span class="line">            arr[i]=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">            <span class="keyword">for</span>(z=<span class="number">0</span>;z&lt;guigeCell[i].getElementsByClassName(<span class="string">"selected"</span>).length;z++)&#123;</span><br><span class="line">                arr[i].push(guigeCell[i].getElementsByClassName(<span class="string">"selected"</span>)[z].innerText)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后得到的arr就是一个二维数组[[“白色”,”红色”],[“M”],[“XXL”],[“套餐一”]]，对应上面的图片应该是这样：<br><img src="https://cdn.1024yun.com/guige-console-log1.png" alt="控制台输出日志"><br>然后就是处理arr这个数组，让这个二维数组里面的值相互拼接在生成另一个数组[[“白色”,”M”,”套餐一”],[“白色”,”XXL”,”套餐一”],[“红色”,”M”,”套餐一”],[“红色”,”XXL”,”套餐一”]]<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="comment">//声明一个新的数组</span></span><br><span class="line"><span class="keyword">var</span> results = [];</span><br><span class="line"><span class="keyword">var</span> indexs = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">specialSort</span>(<span class="params">start</span>) </span>&#123;</span><br><span class="line">    start++;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; len - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!indexs[start]) &#123;</span><br><span class="line">        indexs[start] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(arr[start] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">        arr[start] = [arr[start]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (indexs[start] = <span class="number">0</span>; indexs[start] &lt; arr[start].length; indexs[start]++) &#123;</span><br><span class="line">        specialSort(start);</span><br><span class="line">        <span class="keyword">if</span> (start == len - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(arr[start - i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">                    arr[start - i] = [arr[start - i]];</span><br><span class="line">                &#125;</span><br><span class="line">                temp.push(arr[start - i][indexs[start - i]]);</span><br><span class="line">            &#125;</span><br><span class="line">            results.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">specialSort(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure></p><p>数组results就是最终得到的结果，可以将其打印出来看一下<br><img src="https://cdn.1024yun.com/guige-console-log2.png" alt="控制台输出日志"></p><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 下搭建shadowsocks 服务端</title>
      <link href="/2017/04/24/shadowsocks-for-windows-server/"/>
      <url>/2017/04/24/shadowsocks-for-windows-server/</url>
      
        <content type="html"><![CDATA[<p>Linux下搭建服务端已经非常常见了，今天尝试在windows 下搭建shadowsocks 服务现将记录如下</p><h2 id="一、下载-libQtShadowsocks"><a href="#一、下载-libQtShadowsocks" class="headerlink" title="一、下载 libQtShadowsocks"></a>一、下载 libQtShadowsocks</h2><p>Windows服务端软件下载地址</p><p><a href="https://github.com/shadowsocks/libQtShadowsocks/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/libQtShadowsocks/releases</a></p><p>根据自己电脑系统版本下载对应的版本，下载后进行解压</p><p>得到文件  shadowsocks-libqss.exe</p><h2 id="二、配置相关文件"><a href="#二、配置相关文件" class="headerlink" title="二、配置相关文件"></a>二、配置相关文件</h2><p>在程序目录下创建名为 config.json 配置文件<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:<span class="number">8023</span>,</span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,  </span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"your password"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">600</span>,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"http_proxy"</span>: <span class="literal">false</span>,  </span><br><span class="line">    <span class="string">"auth"</span>: <span class="literal">false</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="三、创建启动脚本"><a href="#三、创建启动脚本" class="headerlink" title="三、创建启动脚本"></a>三、创建启动脚本</h2><p>在同目录下创建 shadowsocks.bat 启动脚本，内容如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off  </span><br><span class="line">shadowsocks-libqss.exe -c config.json -S</span><br></pre></td></tr></table></figure></p><p>然后运行 shadowsocks.bat 即可，关闭时就关闭批处理就行了，很简单</p><h2 id="四、隐藏bat窗口"><a href="#四、隐藏bat窗口" class="headerlink" title="四、隐藏bat窗口"></a>四、隐藏bat窗口</h2><p>运行后上面那个黑色的窗口一直存在，太影响正常使用了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set ws = CreateObject(&quot;Wscript.Shell&quot;)  </span><br><span class="line">ws.run &quot;cmd /c shadowsocks.bat&quot;,vbhide</span><br></pre></td></tr></table></figure></p><p>运行shadowsocks.vbs 即可</p><p>(完)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CentOS上安装ShadowSocks服务端</title>
      <link href="/2017/04/16/ShadowSocks-for-linux-server/"/>
      <url>/2017/04/16/ShadowSocks-for-linux-server/</url>
      
        <content type="html"><![CDATA[<h2 id="1、安装ShadowSocks"><a href="#1、安装ShadowSocks" class="headerlink" title="1、安装ShadowSocks"></a>1、安装ShadowSocks</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install python-setuptools &amp;&amp; easy_install pip </span><br><span class="line"></span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h2 id="2、创建配置文件-etc-shadowsocks-json"><a href="#2、创建配置文件-etc-shadowsocks-json" class="headerlink" title="2、创建配置文件/etc/shadowsocks.json"></a>2、创建配置文件/etc/shadowsocks.json</h2><p>创建/etc/shadowsocks.json<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p><p>打开/etc/shadowsocks.json<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p><p>编辑shadowsocks.json文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">&quot;server&quot;:&quot;1.1.1.1&quot;, </span><br><span class="line">&quot;server_port&quot;:8888, </span><br><span class="line">&quot;local_address&quot;: &quot;127.0.0.1&quot;, </span><br><span class="line">&quot;local_port&quot;:1080, </span><br><span class="line">&quot;password&quot;:&quot;MyPass&quot;, </span><br><span class="line">&quot;timeout&quot;:600, </span><br><span class="line">&quot;method&quot;:&quot;rc4-md5&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>备注：加密方式官方默认使用aes-256-cfb，推荐使用rc4-md5，因为 RC4比AES速度快好几倍。<br>各字段说明：<br>server:服务器IP<br>server_port:服务器端口<br>local_port:本地端端口<br>password:用来加密的密码<br>timeout:超时时间（秒）<br>method:加密方法，可选择 “bf-cfb”, “aes-256-cfb”, “des-cfb”, “rc4″等</p><h2 id="3、使用配置文件在后台运行shadowsocks服务"><a href="#3、使用配置文件在后台运行shadowsocks服务" class="headerlink" title="3、使用配置文件在后台运行shadowsocks服务"></a>3、使用配置文件在后台运行shadowsocks服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><p>备注：若无配置文件，在后台可以使用一下命令运行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -p 443 -k MyPass -m rc4-md5 -d start</span><br></pre></td></tr></table></figure></p><h2 id="4、停止服务"><a href="#4、停止服务" class="headerlink" title="4、停止服务"></a>4、停止服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生JS中DOM节点相关API合集</title>
      <link href="/2017/04/07/javascript-api/"/>
      <url>/2017/04/07/javascript-api/</url>
      
        <content type="html"><![CDATA[<h2 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Node.nodeName   <span class="comment">//返回节点名称，只读</span></span><br><span class="line">Node.nodeType   <span class="comment">//返回节点类型的常数值，只读</span></span><br><span class="line">Node.nodeValue  <span class="comment">//返回Text或Comment节点的文本值，只读</span></span><br><span class="line">Node.textContent  <span class="comment">//返回当前节点和它的所有后代节点的文本内容，可读写</span></span><br><span class="line">Node.baseURI    <span class="comment">//返回当前网页的绝对路径</span></span><br><span class="line"></span><br><span class="line">Node.ownerDocument  <span class="comment">//返回当前节点所在的顶层文档对象，即document</span></span><br><span class="line">Node.nextSibling  <span class="comment">//返回紧跟在当前节点后面的第一个兄弟节点</span></span><br><span class="line">Node.previousSibling  <span class="comment">//返回当前节点前面的、距离最近的一个兄弟节点</span></span><br><span class="line">Node.parentNode   <span class="comment">//返回当前节点的父节点</span></span><br><span class="line">Node.parentElement  <span class="comment">//返回当前节点的父Element节点</span></span><br><span class="line">Node.childNodes   <span class="comment">//返回当前节点的所有子节点</span></span><br><span class="line">Node.firstChild  <span class="comment">//返回当前节点的第一个子节点</span></span><br><span class="line">Node.lastChild   <span class="comment">//返回当前节点的最后一个子节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//parentNode接口</span></span><br><span class="line">Node.children  <span class="comment">//返回指定节点的所有Element子节点</span></span><br><span class="line">Node.firstElementChild  <span class="comment">//返回当前节点的第一个Element子节点</span></span><br><span class="line">Node.lastElementChild   <span class="comment">//返回当前节点的最后一个Element子节点</span></span><br><span class="line">Node.childElementCount  <span class="comment">//返回当前节点所有Element子节点的数目。</span></span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Node.appendChild(node)   <span class="comment">//向节点添加最后一个子节点</span></span><br><span class="line">Node.hasChildNodes()   <span class="comment">//返回布尔值，表示当前节点是否有子节点</span></span><br><span class="line">Node.cloneNode(<span class="literal">true</span>);  <span class="comment">// 默认为false(克隆节点), true(克隆节点及其属性，以及后代)</span></span><br><span class="line">Node.insertBefore(newNode,oldNode)  <span class="comment">// 在指定子节点之前插入新的子节点</span></span><br><span class="line">Node.removeChild(node)   <span class="comment">//删除节点，在要删除节点的父节点上操作</span></span><br><span class="line">Node.replaceChild(newChild,oldChild)  <span class="comment">//替换节点</span></span><br><span class="line">Node.contains(node)  <span class="comment">//返回一个布尔值，表示参数节点是否为当前节点的后代节点。</span></span><br><span class="line">Node.compareDocumentPosition(node)   <span class="comment">//返回一个7个比特位的二进制值，表示参数节点和当前节点的关系</span></span><br><span class="line">Node.isEqualNode(noe)  <span class="comment">//返回布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。</span></span><br><span class="line">Node.normalize()   <span class="comment">//用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并且将毗邻的文本节点合并成一个。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ChildNode接口</span></span><br><span class="line">Node.remove()  <span class="comment">//用于删除当前节点</span></span><br><span class="line">Node.before()  <span class="comment">//</span></span><br><span class="line">Node.after()</span><br><span class="line">Node.replaceWith()</span><br></pre></td></tr></table></figure><h2 id="Document节点"><a href="#Document节点" class="headerlink" title="Document节点"></a>Document节点</h2><h3 id="Document节点的属性"><a href="#Document节点的属性" class="headerlink" title="Document节点的属性"></a>Document节点的属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.doctype   <span class="comment">//</span></span><br><span class="line"><span class="built_in">document</span>.documentElement  <span class="comment">//返回当前文档的根节点</span></span><br><span class="line"><span class="built_in">document</span>.defaultView   <span class="comment">//返回document对象所在的window对象</span></span><br><span class="line"><span class="built_in">document</span>.body   <span class="comment">//返回当前文档的&lt;body&gt;节点</span></span><br><span class="line"><span class="built_in">document</span>.head   <span class="comment">//返回当前文档的&lt;head&gt;节点</span></span><br><span class="line"><span class="built_in">document</span>.activeElement  <span class="comment">//返回当前文档中获得焦点的那个元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//节点集合属性</span></span><br><span class="line"><span class="built_in">document</span>.links  <span class="comment">//返回当前文档的所有a元素</span></span><br><span class="line"><span class="built_in">document</span>.forms  <span class="comment">//返回页面中所有表单元素</span></span><br><span class="line"><span class="built_in">document</span>.images  <span class="comment">//返回页面中所有图片元素</span></span><br><span class="line"><span class="built_in">document</span>.embeds  <span class="comment">//返回网页中所有嵌入对象</span></span><br><span class="line"><span class="built_in">document</span>.scripts  <span class="comment">//返回当前文档的所有脚本</span></span><br><span class="line"><span class="built_in">document</span>.styleSheets  <span class="comment">//返回当前网页的所有样式表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文档信息属性</span></span><br><span class="line"><span class="built_in">document</span>.documentURI  <span class="comment">//表示当前文档的网址</span></span><br><span class="line"><span class="built_in">document</span>.URL  <span class="comment">//返回当前文档的网址</span></span><br><span class="line"><span class="built_in">document</span>.domain  <span class="comment">//返回当前文档的域名</span></span><br><span class="line"><span class="built_in">document</span>.lastModified  <span class="comment">//返回当前文档最后修改的时间戳</span></span><br><span class="line"><span class="built_in">document</span>.location  <span class="comment">//返回location对象，提供当前文档的URL信息</span></span><br><span class="line"><span class="built_in">document</span>.referrer  <span class="comment">//返回当前文档的访问来源</span></span><br><span class="line"><span class="built_in">document</span>.title    <span class="comment">//返回当前文档的标题</span></span><br><span class="line"><span class="built_in">document</span>.characterSet属性返回渲染当前文档的字符集，比如UTF<span class="number">-8</span>、ISO<span class="number">-8859</span><span class="number">-1</span>。</span><br><span class="line"><span class="built_in">document</span>.readyState  <span class="comment">//返回当前文档的状态</span></span><br><span class="line"><span class="built_in">document</span>.designMode  <span class="comment">//控制当前文档是否可编辑，可读写</span></span><br><span class="line"><span class="built_in">document</span>.compatMode  <span class="comment">//返回浏览器处理文档的模式</span></span><br><span class="line"><span class="built_in">document</span>.cookie   <span class="comment">//用来操作Cookie</span></span><br></pre></td></tr></table></figure><h3 id="Document-节点的方法"><a href="#Document-节点的方法" class="headerlink" title="Document 节点的方法"></a>Document 节点的方法</h3><h4 id="读写方法"><a href="#读写方法" class="headerlink" title="读写方法"></a>读写方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.open()   <span class="comment">//用于新建并打开一个文档</span></span><br><span class="line"><span class="built_in">document</span>.close()   <span class="comment">//不安比open方法所新建的文档</span></span><br><span class="line"><span class="built_in">document</span>.write()   <span class="comment">//用于向当前文档写入内容</span></span><br><span class="line"><span class="built_in">document</span>.writeIn()  <span class="comment">//用于向当前文档写入内容，尾部添加换行符。</span></span><br></pre></td></tr></table></figure><h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(selectors)   <span class="comment">//接受一个CSS选择器作为参数，返回第一个匹配该选择器的元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(selectors)  <span class="comment">//接受一个CSS选择器作为参数，返回所有匹配该选择器的元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(tagName)  <span class="comment">//返回所有指定HTML标签的元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(className)   <span class="comment">//返回包括了所有class名字符合指定条件的元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(name)   <span class="comment">//用于选择拥有name属性的HTML元素（比如&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;embed&gt;和&lt;object&gt;等）</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(id)   <span class="comment">//返回匹配指定id属性的元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.elementFromPoint(x,y)  <span class="comment">//返回位于页面指定位置最上层的Element子节点。</span></span><br></pre></td></tr></table></figure><h4 id="生成节点"><a href="#生成节点" class="headerlink" title="生成节点"></a>生成节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(tagName)   <span class="comment">//用来生成HTML元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.createTextNode(text)   <span class="comment">//用来生成文本节点</span></span><br><span class="line"><span class="built_in">document</span>.createAttribute(name)  <span class="comment">//生成一个新的属性对象节点，并返回它。</span></span><br><span class="line"><span class="built_in">document</span>.createDocumentFragment()  <span class="comment">//生成一个DocumentFragment对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//事件方法</span></span><br><span class="line"><span class="built_in">document</span>.createEvent(type)   <span class="comment">//生成一个事件对象，该对象能被element.dispatchEvent()方法使用</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(type,listener,capture)  <span class="comment">//注册事件</span></span><br><span class="line"><span class="built_in">document</span>.removeEventListener(type,listener,capture)  <span class="comment">//注销事件</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(event)  <span class="comment">//触发事件</span></span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.hasFocus()   <span class="comment">//返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。</span></span><br><span class="line"><span class="built_in">document</span>.adoptNode(externalNode)  <span class="comment">//将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点。</span></span><br><span class="line"><span class="built_in">document</span>.importNode(externalNode, deep)   <span class="comment">//从外部文档拷贝指定节点，插入当前文档。</span></span><br></pre></td></tr></table></figure><h2 id="Element节点"><a href="#Element节点" class="headerlink" title="Element节点"></a>Element节点</h2><h3 id="Element节点的属性"><a href="#Element节点的属性" class="headerlink" title="Element节点的属性"></a>Element节点的属性</h3><h4 id="特性属性"><a href="#特性属性" class="headerlink" title="特性属性"></a>特性属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.attributes  <span class="comment">//返回当前元素节点的所有属性节点</span></span><br><span class="line">Element.id  <span class="comment">//返回指定元素的id属性，可读写</span></span><br><span class="line">Element.tagName  <span class="comment">//返回指定元素的大写标签名</span></span><br><span class="line">Element.innerHTML   <span class="comment">//返回该元素包含的HTML代码，可读写</span></span><br><span class="line">Element.outerHTML  <span class="comment">//返回指定元素节点的所有HTML代码，包括它自身和包含的的所有子元素，可读写</span></span><br><span class="line">Element.className  <span class="comment">//返回当前元素的class属性，可读写</span></span><br><span class="line">Element.classList  <span class="comment">//返回当前元素节点的所有class集合</span></span><br><span class="line">Element.dataset   <span class="comment">//返回元素节点中所有的data-*属性。</span></span><br></pre></td></tr></table></figure><h4 id="尺寸属性"><a href="#尺寸属性" class="headerlink" title="尺寸属性"></a>尺寸属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.clientHeight   <span class="comment">//返回元素节点可见部分的高度</span></span><br><span class="line">Element.clientWidth   <span class="comment">//返回元素节点可见部分的宽度</span></span><br><span class="line">Element.clientLeft   <span class="comment">//返回元素节点左边框的宽度</span></span><br><span class="line">Element.clientTop   <span class="comment">//返回元素节点顶部边框的宽度</span></span><br><span class="line">Element.scrollHeight  <span class="comment">//返回元素节点的总高度</span></span><br><span class="line">Element.scrollWidth  <span class="comment">//返回元素节点的总宽度</span></span><br><span class="line">Element.scrollLeft   <span class="comment">//返回元素节点的水平滚动条向右滚动的像素数值,通过设置这个属性可以改变元素的滚动位置</span></span><br><span class="line">Element.scrollTop   <span class="comment">//返回元素节点的垂直滚动向下滚动的像素数值</span></span><br><span class="line">Element.offsetHeight   <span class="comment">//返回元素的垂直高度(包含border,padding)</span></span><br><span class="line">Element.offsetWidth    <span class="comment">//返回元素的水平宽度(包含border,padding)</span></span><br><span class="line">Element.offsetLeft    <span class="comment">//返回当前元素左上角相对于Element.offsetParent节点的垂直偏移</span></span><br><span class="line">Element.offsetTop   <span class="comment">//返回水平位移</span></span><br><span class="line">Element.style  <span class="comment">//返回元素节点的行内样式</span></span><br></pre></td></tr></table></figure><h4 id="节点相关属性"><a href="#节点相关属性" class="headerlink" title="节点相关属性"></a>节点相关属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.children   <span class="comment">//包括当前元素节点的所有子元素</span></span><br><span class="line">Element.childElementCount   <span class="comment">//返回当前元素节点包含的子HTML元素节点的个数</span></span><br><span class="line">Element.firstElementChild  <span class="comment">//返回当前节点的第一个Element子节点  </span></span><br><span class="line">Element.lastElementChild   <span class="comment">//返回当前节点的最后一个Element子节点  </span></span><br><span class="line">Element.nextElementSibling  <span class="comment">//返回当前元素节点的下一个兄弟HTML元素节点</span></span><br><span class="line">Element.previousElementSibling  <span class="comment">//返回当前元素节点的前一个兄弟HTML节点</span></span><br><span class="line">Element.offsetParent   <span class="comment">//返回当前元素节点的最靠近的、并且CSS的position属性不等于static的父元素。</span></span><br></pre></td></tr></table></figure><h3 id="Element节点的方法"><a href="#Element节点的方法" class="headerlink" title="Element节点的方法"></a>Element节点的方法</h3><h4 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getBoundingClientRect()  </span><br><span class="line"><span class="comment">// getBoundingClientRect返回一个对象，包含top,left,right,bottom,width,height // width、height 元素自身宽高</span></span><br><span class="line"><span class="comment">// top 元素上外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// right 元素右外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// bottom 元素下外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// left 元素左外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// width 元素自身宽(包含border,padding) </span></span><br><span class="line"><span class="comment">// height 元素自身高(包含border,padding) </span></span><br><span class="line"></span><br><span class="line">getClientRects()   <span class="comment">//返回当前元素在页面上形参的所有矩形。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素在页面上的偏移量  </span></span><br><span class="line"><span class="keyword">var</span> rect = el.getBoundingClientRect()  </span><br><span class="line"><span class="keyword">return</span> &#123;   </span><br><span class="line">  top: rect.top + <span class="built_in">document</span>.body.scrollTop,   </span><br><span class="line">  left: rect.left + <span class="built_in">document</span>.body.scrollLeft  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法"></a>属性方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.getAttribute()：读取指定属性  </span><br><span class="line">Element.setAttribute()：设置指定属性  </span><br><span class="line">Element.hasAttribute()：返回一个布尔值，表示当前元素节点是否有指定的属性  </span><br><span class="line">Element.removeAttribute()：移除指定属性</span><br></pre></td></tr></table></figure><h4 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.querySelector()  </span><br><span class="line">Element.querySelectorAll()  </span><br><span class="line">Element.getElementsByTagName()  </span><br><span class="line">Element.getElementsByClassName()</span><br></pre></td></tr></table></figure><h4 id="事件方法"><a href="#事件方法" class="headerlink" title="事件方法"></a>事件方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.addEventListener()：添加事件的回调函数  </span><br><span class="line">Element.removeEventListener()：移除事件监听函数  </span><br><span class="line">Element.dispatchEvent()：触发事件</span><br><span class="line"></span><br><span class="line"><span class="comment">//ie8</span></span><br><span class="line">Element.attachEvent(oneventName,listener)</span><br><span class="line">Element.detachEvent(oneventName,listener)</span><br><span class="line"></span><br><span class="line"><span class="comment">// event对象  </span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">window</span>.event||event;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件的目标节点  </span></span><br><span class="line"><span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件代理  </span></span><br><span class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;   </span><br><span class="line">  <span class="keyword">if</span> (event.target.tagName.toLowerCase() === <span class="string">'li'</span>) &#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(event.target.innerHTML)   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.scrollIntoView()   <span class="comment">//滚动当前元素，进入浏览器的可见区域\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析HTML字符串，然后将生成的节点插入DOM树的指定位置。</span></span><br><span class="line">Element.insertAdjacentHTML(where, htmlString); </span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'beforeBegin'</span>, htmlString); <span class="comment">// 在该元素前插入  </span></span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'afterBegin'</span>, htmlString); <span class="comment">// 在该元素第一个子元素前插入 </span></span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'beforeEnd'</span>, htmlString); <span class="comment">// 在该元素最后一个子元素后面插入 </span></span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'afterEnd'</span>, htmlString); <span class="comment">// 在该元素后插入</span></span><br><span class="line"></span><br><span class="line">Element.remove()  <span class="comment">//用于将当前元素节点从DOM中移除</span></span><br><span class="line">Element.focus()   <span class="comment">//用于将当前页面的焦点，转移到指定元素上</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS in JS 简介</title>
      <link href="/2017/04/05/css-in-js/"/>
      <url>/2017/04/05/css-in-js/</url>
      
        <content type="html"><![CDATA[<p>以前，网页开发有一个原则，叫做 “关注点分离” （separation of concerns）。它的意思是，各种技术只负责自己的领域，不要混合在一起，形成耦合。对于网页开发来说，主要是三种技术分离。<br><img src="https://cdn.1024yun.com/64527050213562.jpg" alt="图1"></p><blockquote><ol><li>HTML 语言：负责网页的结构，又称语义层</li><li>CSS 语言：负责网页的样式，又称视觉层</li><li>JavaScript 语言：负责网页的逻辑和交互，又称逻辑层或交互层</li></ol></blockquote><p>简单说，就是一句话，不要写”行内样式”（inline style）和”行内脚本”（inline script）。比如，下面代码就很糟糕（查看 完整代码 ）。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color:red;font-size:46px;"</span>  <span class="attr">onclick</span>=<span class="string">"alert('Hi')"</span>&gt;</span></span><br><span class="line">  Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>React 出现以后，这个原则不再适用了。因为，React 是组件结构，强制要求把 HTML、CSS、javascript 写在一起。</p><p>上面的例子使用 React 改写如下（查看 完整代码 ）。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">  <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">  <span class="string">'fontSize'</span>: <span class="string">'46px'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clickHandler = <span class="function"><span class="params">()</span> =&gt;</span> alert(<span class="string">'hi'</span>); </span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1 style=&#123;style&#125; onclick=&#123;clickHandler&#125;&gt;</span><br><span class="line">     Hello, world!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('example')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></p><p>上面代码在一个文件里面，封装了结构、样式和逻辑，完全违背了”关注点分离”的原则，很多人不适应。</p><p>但是，这有利于组件的隔离。每个组件包含了所有需要用到的代码，不依赖外部，组件之间没有耦合，很方便复用。所以，随着 React 的走红和组件模式深入人心，这种”关注点混合”的新写法逐渐成为主流。<br><img src="https://cdn.1024yun.com/64527050213563.png" alt="图2"></p><p>表面上，React 的写法是 HTML、CSS、JavaScript 混合在一起。但是，实际上不是。现在其实是用 JavaScript 在写 HTML 和 CSS。</p><p>React 在 JavaScript 里面实现了对 HTML 和 CSS 的封装，我们通过封装去操作 HTML 和 CSS。也就是说，网页的结构和样式都通过 JavaScript 操作。</p><p>React 对 HTML 的封装是 JSX 语言 ，这个在各种 React 教程都有详细介绍，本文不再涉及了，下面来看 React 对 CSS 的封装。</p><p>React 对 CSS 封装非常简单，就是沿用了 DOM 的 style 属性对象 ，这个在前面已经看到过了。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">  <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">  <span class="string">'fontSize'</span>: <span class="string">'46px'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面代码中，CSS 的 font-size 属性要写成 fontSize ，这是 JavaScript 操作 CSS 属性的 约定 。</p><p>由于 CSS 的封装非常弱，导致了一系列的第三方库，用来加强 React 的 CSS 操作。它们统称为 CSS in JS，意思就是使用 JS 语言写 CSS。根据不完全统计，各种 CSS in JS 的库至少有 47种 。老实说，现在也看不出来，哪一个库会变成主流。<br><img src="https://cdn.1024yun.com/64527050213564.jpg" alt="图3"><br>你可能会问，它们与”CSS 预处理器”（比如 Less 和 Sass ，包括 PostCSS）有什么区别？回答是 CSS in JS 使用 JavaScript 的语法，是 JavaScript 脚本的一部分，不用从头学习一套专用的 API，也不会多一道编译步骤。</p><p>上周，我看到一个新的 CSS in JS 库，叫做 polished.js 。它将一些常用的 CSS 属性封装成函数，用起来非常方便，充分体现使用 JavaScript 语言写 CSS 的优势。<br><img src="https://cdn.1024yun.com/64527050213565.png" alt="图4"><br>我觉得这个库很值得推荐，这篇文章的主要目的，就是想从这个库来看怎么使用 CSS in JS。</p><p>首先，加载 polished.js。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> polished = <span class="built_in">require</span>(<span class="string">'polished'</span>);</span><br></pre></td></tr></table></figure></p><p>如果是浏览器，插入下面的脚本。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/polished@1.0.0/dist/polished.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面代码中， clearFix 就是一个普通的 JavaScript 函数，返回一个对象。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">polished.clearFix()</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//  &amp;::after: &#123;</span></span><br><span class="line"><span class="comment">//    clear: "both",</span></span><br><span class="line"><span class="comment">//    content: "",</span></span><br><span class="line"><span class="comment">//    display: "table"</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><p>“展开运算符”（ … ）将 clearFix 返回的对象展开，便于与其他 CSS 属性混合。然后，将样式对象赋给 React 组件的 style 属性，这个组件就能清理浮动了。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1 style=&#123;style&#125;&gt;Hello, React!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>从这个例子，大家应该能够体会 polished.js 的用法。<br>下面再看几个很有用的函数。</p><p>ellipsis 将超过指定长度的文本，使用省略号替代（查看 完整代码 ）。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  ...polished.ellipsis(<span class="string">'200px'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   'display': 'inline-block',</span></span><br><span class="line"><span class="comment">//   'max-width': '250px',</span></span><br><span class="line"><span class="comment">//   'overflow': 'hidden',</span></span><br><span class="line"><span class="comment">//   'text-overflow': 'ellipsis',</span></span><br><span class="line"><span class="comment">//   'white-space': 'nowrap',</span></span><br><span class="line"><span class="comment">//   'word-wrap': 'normal'</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><p>hiDPI 指定高分屏样式。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line"> [polished.hiDPI(<span class="number">1.5</span>)]: &#123;</span><br><span class="line">   width: <span class="string">'200px'</span>,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">//'@media only screen and (-webkit-min-device-pixel-ratio: 1.5),</span></span><br><span class="line"><span class="comment">// only screen and (min--moz-device-pixel-ratio: 1.5),</span></span><br><span class="line"><span class="comment">// only screen and (-o-min-device-pixel-ratio: 1.5/1),</span></span><br><span class="line"><span class="comment">// only screen and (min-resolution: 144dpi),</span></span><br><span class="line"><span class="comment">// only screen and (min-resolution: 1.5dppx)': &#123;</span></span><br><span class="line"><span class="comment">//  'width': '200px',</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></p><p>retinaImage 为高分屏和低分屏设置不同的背景图。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line"> ...polished.retinaImage(<span class="string">'my-img'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">//   backgroundImage: 'url(my-img.png)',</span></span><br><span class="line"><span class="comment">//  '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),</span></span><br><span class="line"><span class="comment">//   only screen and (min--moz-device-pixel-ratio: 1.3),</span></span><br><span class="line"><span class="comment">//   only screen and (-o-min-device-pixel-ratio: 1.3/1),</span></span><br><span class="line"><span class="comment">//   only screen and (min-resolution: 144dpi),</span></span><br><span class="line"><span class="comment">//   only screen and (min-resolution: 1.5dppx)': &#123;</span></span><br><span class="line"><span class="comment">//    backgroundImage: 'url(my-img_2x.png)',</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure></p><p>polished.js 提供的其他方法如下，详细用法请参考 文档 。</p><blockquote><ol><li>normalize() ：样式表初始化</li><li>placeholder() ：对 placeholder 伪元素设置样式</li><li>selection() ：对 selection 伪元素设置样式</li><li>darken() ：调节颜色深浅</li><li>lighten() ：调节颜色深浅</li><li>desaturate() ：降低颜色的饱和度</li><li>saturate() ：增加颜色的饱和度</li><li>opacify() ：调节透明度</li><li>complement() ：返回互补色</li><li>grayscale() ：将一个颜色转为灰度</li><li>rgb() ：指定红、绿、蓝三个值，返回一个颜色</li><li>rgba() ：指定红、绿、蓝和透明度四个值，返回一个颜色</li><li>hsl() ：指定色调、饱和度和亮度三个值，返回一个颜色</li><li>hsla() ：指定色调、饱和度、亮度和透明度三个值，返回一个颜色</li><li>mix() ：混合两种颜色</li><li>em() ：将像素转为 em</li><li>rem() ：将像素转为 rem</li></ol></blockquote><p>目前， polished.js 只是1.0版，以后应该会有越来越多的方法。</p><p>polished.js 还有一个特色：所有函数默认都是柯里化的，因此可以进行函数组合运算，定制出自己想要的函数。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; compose &#125; <span class="keyword">from</span> <span class="string">'ramda'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; lighten, desaturate &#125; <span class="keyword">from</span> <span class="string">'polished'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tone = compose(lighten(<span class="number">10</span>), desaturate(<span class="number">10</span>))</span><br></pre></td></tr></table></figure></p><p>上面代码使用 Ramda 函数库完成组合运算。</p><p>（正文完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5中类jQuery选择器querySelector的使用</title>
      <link href="/2017/03/29/querySelector/"/>
      <url>/2017/03/29/querySelector/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HTML5向Web API新引入了document.querySelector以及document.querySelectorAll两个方法用来更方便地从DOM选取元素，功能类似于jQuery的选择器。这使得在编写原生JavaScript代码时方便了许多。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>两个方法使用差不多的语法，都是接收一个字符串参数，这个参数需要是合法的CSS选择语法。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element = <span class="built_in">document</span>.querySelector(<span class="string">'selectors'</span>);</span><br><span class="line">elementList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'selectors'</span>);</span><br></pre></td></tr></table></figure></p><p>其中参数selectors 可以包含多个CSS选择器，用逗号隔开。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element = <span class="built_in">document</span>.querySelector(<span class="string">'selector1,selector2,...'</span>);</span><br><span class="line">elementList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'selector1,selector2,...'</span>);</span><br></pre></td></tr></table></figure></p><p>使用这两个方法无法查找带伪类状态的元素，比如querySelector(‘:hover’)不会得到预期结果。</p><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><p>该方法返回满足条件的单个元素。按照深度优先和先序遍历的原则使用参数提供的CSS选择器在DOM进行查找，返回第一个满足条件的元素。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element = <span class="built_in">document</span>.querySelector(<span class="string">'div#container'</span>);<span class="comment">//返回id为container的首个div</span></span><br><span class="line">element = <span class="built_in">document</span>.querySelector(<span class="string">'.foo,.bar'</span>);<span class="comment">//返回带有foo或者bar样式类的首个元素</span></span><br></pre></td></tr></table></figure></p><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><p>该方法返回所有满足条件的元素，结果是个nodeList集合。查找规则与前面所述一样。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">elements = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div.foo'</span>);<span class="comment">//返回所有带foo类样式的div</span></span><br></pre></td></tr></table></figure></p><p>但需要注意的是返回的nodeList集合中的元素是非实时（no-live）的，想要区别什么是实时非实时的返回结果，请看下例：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先选取页面中id为container的元素</span></span><br><span class="line">container=<span class="built_in">document</span>.getElementById(<span class="string">'#container'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(container.childNodes.length)<span class="comment">//结果为2</span></span><br><span class="line"><span class="comment">//然后通过代码为其添加一个子元素</span></span><br><span class="line">container.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'div'</span>));</span><br><span class="line"><span class="comment">//这个元素不但添加到页面了，这里的变量container也自动更新了</span></span><br><span class="line"><span class="built_in">console</span>.log(container.childNodes.length)<span class="comment">//结果为3</span></span><br></pre></td></tr></table></figure><p>通过上面的例子就很好地理解了什么是会实时更新的元素。document.getElementById返回的便是实时结果，上面对其添加一个子元素后，再次获取所有子元素个数，已经由原来的2个更新为3个(这里不考虑有些浏览器比如Chrome会把空白也解析为一个子节点)。</p><h2 id="关于转义"><a href="#关于转义" class="headerlink" title="关于转义"></a>关于转义</h2><p>我们知道反斜杠是用来转义用的，比如在字符串里我们想表示空字符就使用’\b’，换行’\n’。同样，在提供给querySelector和querySelectorAll的参数也支持转义，了解这点非常重要。<br>先看个例子，比如我们有个div它的样式类为’foo:bar’，当然我知道你一般不会这样写。当我们需要选择它的时候，就需要将其中的冒号进行转义，否则抛错。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo:bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>浏览器报怨表示不是一个合法的选择语句。<br>同时，有趣的事情来了，或许你以为将冒号直接转义就解决问题了。<br>同样，也表示非法。原因就在于反斜杠在字符串中本身就表示转义的意思，它于冒号结合转不出东西来，于是抛错。<br>所以正确的做法是将反斜杠转义后’.foo\:bar’再传递给querySelector，后者在接收到’.foo\:bar’这个参数后，字符串将两个反斜杠转义成一个，然后querySelector前面得到的一个反斜杠与冒号结合进行转义得到正确结果。<br>也就是说经历两次转义，一次是字符串当中，一次是querySelector解析参数时。<br>理解这点后，可以来看一个更有趣的例子了。比如我们要选择类名里面含反斜杠的元素。是的，我们需要一共使用四个反斜杠！才能正常工作。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo\bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm默认安装目录修改</title>
      <link href="/2017/03/23/npm%E9%BB%98%E8%AE%A4%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E4%BF%AE%E6%94%B9/"/>
      <url>/2017/03/23/npm%E9%BB%98%E8%AE%A4%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>查看所有全局安装的模块 <code>npm ls -g</code><br>查看npm默认设置（部分） <code>npm config ls</code><br>查看npm默认设置（全部） <code>npm config ls -l</code><br>以下两种方法来修改npm的默认安装目录</p><ol><li>使用命令 <code>npm config set prefix &quot;D:\Program Files\nodejs\node_global&quot;</code> 来修改npm默认的安装目录</li><li>修改npm文件夹下的npmrc文件，打开修改里面的内容，原来的内容删掉，写入 <code>prefix=D:\Program Files\nodejs\node_global  cache=D:\Program Files\nodejs\node_cache</code></li></ol><p>当安装完模块后还不能用，因为改变了默认的路径，需要修改系统的环境变量配置去让命令行识别命令，这里分为用户变量和系统变量。先在用户变量里面新建明为PATH的变量，值为D:\Program Files\nodejs\node_global。然后在系统变量里面新建一个叫NODE_PATH的变量，值为D:\Program Files\nodejs\node_global\node_modules，这个值是node_global下的node_modules文件夹的路径，以后安装的全局模块就在这里，（这个文件夹是安装完任何一个模块后才会出现，所以配置环境变量前要随便先安装一个模块）</p><p>最后关于cnpm我现在是不想用它了之前用它遇到过安装不成功的，现在换了默认地址安装完它后愣是不能使用，所幸还有其他办法，很简单一句话：<code>npm config set registry https://registry.npm.taobao.org</code> 这句话就可以设置npm也是从国内淘宝镜像来下载安装模块了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个markdown文章</title>
      <link href="/2017/03/23/markdown/"/>
      <url>/2017/03/23/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一个markdown文章"><a href="#这是我的第一个markdown文章" class="headerlink" title="这是我的第一个markdown文章"></a>这是我的第一个markdown文章</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> er = <span class="built_in">document</span>.getElmentById(<span class="string">'df'</span>)</span><br><span class="line">er.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'aaaa'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是普通段落</p><p><a href="https://www.tmtsino.com" target="_blank" rel="noopener">这是一个连接</a><br><img src="https://cdn.1024yun.com/avatar.jpg" alt="这是一张图片"></p><p>下面是一个列表</p><ul><li>第一列</li><li>第二列</li><li>第三列</li></ul><p>下面是一个引用</p><blockquote><p>一半在写文章需要引用其他作者的一句话的时候需要在前面加上&gt;加一个空格fgsdgfsgdfgfdgdfgdfgfdgfdgdfgdfg</p></blockquote><p>以下是一个示例<br>未选中状态的示例</p><ul><li>[ ] 支持以 PDF 格式导出文稿</li><li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li>[ ] 支持以 PDF 格式导出文稿</li><li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li></ul><p>选中状态的</p><ul><li>[x] 新增 Todo 列表功能</li><li>[x] 修复 LaTex 公式渲染问题</li><li>[x] 新增 LaTex 公式编号功能</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
